{"version":3,"file":"static/js/861.596519b1.chunk.js","mappings":"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","sources":["views/pages/generateYaml/GenerateAndViewYaml.js","../node_modules/@coreui/react/src/components/card/CCard.tsx","../node_modules/@coreui/react/src/components/card/CCardBody.tsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { CCard, CCardHeader, CCardBody } from '@coreui/react'\r\n\r\nfunction GenerateAndViewYaml() {\r\n  const [createdObject, setCreatedObject] = useState(null);\r\n  const [isPosting, setIsPosting] = useState(false);\r\n\r\n  // const handleButtonClick = async () => {\r\n  //   setIsPosting(true);\r\n\r\n    // Replace with your actual endpoint and data structure\r\n  //   const url = 'https://your-backend-endpoint.com/api/create';\r\n  //   const postData = {\r\n  //     // ... your data object to post\r\n  //   };\r\n\r\n  //   try {\r\n  //     const response = await axios.post(url, postData);\r\n  //     setCreatedObject(response.data);\r\n  //   } catch (error) {\r\n  //     console.error('Error posting data:', error);\r\n  //     // Handle error appropriately\r\n  //   }\r\n\r\n  //   setIsPosting(false);\r\n  // };\r\n\r\n  return (\r\n    <><CCard className=\"mb-4\">\r\n        <CCardHeader>Generate Playbook YAML</CCardHeader>\r\n        <CCardBody>\r\n          <p>\r\n            Click button to generate default YAML for Ansible Playbook\r\n          </p>\r\n          <div className=\"bd-example\">\r\n            <dl className=\"row\">\r\n              <dt className=\"col-sm-3\">\r\n            <div>\r\n        <button>\r\n          {'Generate YAML'}\r\n        </button>\r\n    </div>\r\n              </dt>\r\n            </dl>\r\n          </div>\r\n        </CCardBody>\r\n      </CCard>\r\n      <CCard className=\"mb-4\">\r\n        <CCardHeader>\r\n          View Generated YAML\r\n        </CCardHeader>\r\n        <CCardBody>\r\n        <p>\r\n          Below is the generated YAML from the earlier post call\r\n        </p>\r\n        {createdObject && (\r\n          <div>\r\n            <h3>Created Object:</h3>\r\n            <pre>{JSON.stringify(createdObject, null, 2)}</pre>\r\n          </div>\r\n      )}\r\n        </CCardBody>\r\n      </CCard>  \r\n  </>\r\n  );\r\n}\r\n\r\nexport default GenerateAndViewYaml;\r\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n  /**\n   * Sets the component's color scheme to one of CoreUI's themed colors, ensuring the text color contrast adheres to the WCAG 4.5:1 contrast ratio standard for accessibility.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   * @since 5.0.0-rc.3\n   */\n  textBgColor?: Colors\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textBgColor, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n            [`text-bg-${textBgColor}`]: textBgColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textBgColor: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n"],"names":["createdObject","setCreatedObject","useState","isPosting","setIsPosting","_jsxs","_Fragment","children","CCard","className","_jsx","CCardHeader","CCardBody","JSON","stringify","forwardRef","_a","ref","color","textBgColor","textColor","rest","__rest","React","__assign","classNames","_b","concat","propTypes","PropTypes","colorPropType","displayName","as","Component"],"sourceRoot":""}