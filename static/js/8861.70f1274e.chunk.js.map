{"version":3,"file":"static/js/8861.70f1274e.chunk.js","mappings":"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","sources":["views/pages/generateYaml/GenerateAndViewYaml.js","../node_modules/@coreui/react/src/components/card/CCard.tsx","../node_modules/@coreui/react/src/components/card/CCardBody.tsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { CCard, CCardHeader, CCardBody } from '@coreui/react'\n\nfunction GenerateAndViewYaml() {\n  const [createdObject, setCreatedObject] = useState(null);\n  const [createdObject2, setCreatedObject2] = useState(null);\n  const [isPosting, setIsPosting] = useState(false);\n\n  const handleButtonClick = async () => {\n    setIsPosting(true);\n\n    // Replace with your actual endpoint and data structure\n    const url = 'http://127.0.0.1:8000/EC2/download/2/';\n    const postData = {\n      // ... your data object to post\n    };\n\n    try {\n      const response = await axios.get(url);\n      setCreatedObject(response.data);\n    } catch (error) {\n      console.error('Error posting data:', error);\n      // Handle error appropriately\n    }\n\n    setIsPosting(false);\n  };\n\n  const handleCopyClick = (textToCopy) => {\n    navigator.clipboard.writeText(textToCopy);\n  };\n\n  const handlePaste = async () => {\n    try {\n      const textFromClipboard = await navigator.clipboard.readText();\n      setCreatedObject2(textFromClipboard);\n    } catch (error) {\n      console.error('Error pasting from clipboard:', error);\n      // Handle error appropriately\n    }\n  };\n\n  return (\n    <><CCard className=\"mb-4\">\n        <CCardHeader>Generate Playbook YAML</CCardHeader>\n        <CCardBody>\n          <p>\n            Click button to generate default YAML for Ansible Playbook\n          </p>\n          <div className=\"bd-example\">\n            <dl className=\"row\">\n              <dt className=\"col-sm-3\">\n            <div>\n        <button onClick={handleButtonClick} disabled={isPosting}>\n          {isPosting ? 'Generating...' : 'Generate YAML'}\n        </button>\n    </div>\n              </dt>\n            </dl>\n          </div>\n        </CCardBody>\n      </CCard>\n      <CCard className=\"mb-4\">\n        <CCardHeader>\n          View Generated YAML\n        </CCardHeader>\n        <CCardBody>\n        <p>\n          Below is the generated YAML from the earlier get call\n        </p>\n        {createdObject && (\n          <div>\n            <h3>Created Object:</h3>\n            <pre>{createdObject}</pre>\n            <button onClick={() => handleCopyClick(createdObject)}>Copy to Clipboard</button>\n          </div>\n      )}\n        </CCardBody>\n      </CCard> \n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            Modify Generated Yamal\n          </CCardHeader>\n          <CCardBody>\n          <p>\n          Below you can paste and modify the generated YAML\n          </p>\n            {/* Text input to modify the generated YAML */}\n            <textarea id=\"myTextarea\" \n            value={createdObject2} \n            rows=\"20\" \n            cols=\"60\" \n            onChange={(e) => setCreatedObject2(e.target.value)}\n            ></textarea>\n            <div>\n              <button onClick={() => handleCopyClick(createdObject2)}>Copy to Clipboard</button>\n              <button onClick={handlePaste}>Paste from Clipboard</button>\n            </div>\n          </CCardBody>\n        </CCard> \n    </>\n  );\n}\n\nexport default GenerateAndViewYaml;\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n  /**\n   * Sets the component's color scheme to one of CoreUI's themed colors, ensuring the text color contrast adheres to the WCAG 4.5:1 contrast ratio standard for accessibility.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   * @since 5.0.0-rc.3\n   */\n  textBgColor?: Colors\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textBgColor, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n            [`text-bg-${textBgColor}`]: textBgColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textBgColor: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n"],"names":["createdObject","setCreatedObject","useState","createdObject2","setCreatedObject2","isPosting","setIsPosting","handleCopyClick","textToCopy","navigator","clipboard","writeText","_jsxs","_Fragment","children","CCard","className","_jsx","CCardHeader","CCardBody","onClick","async","response","axios","get","data","error","console","disabled","id","value","rows","cols","onChange","e","target","textFromClipboard","readText","forwardRef","_a","ref","color","textBgColor","textColor","rest","__rest","React","__assign","classNames","_b","concat","propTypes","PropTypes","colorPropType","displayName","as","Component"],"sourceRoot":""}