{"version":3,"file":"static/js/3518.ab86c46f.chunk.js","mappings":"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","sources":["../node_modules/@coreui/react/src/components/form/CFormSwitch.tsx","views/forms/checks-radios/ChecksRadios.js","../node_modules/@coreui/react/src/components/card/CCard.tsx","../node_modules/@coreui/react/src/components/card/CCardBody.tsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/form/CFormCheck.tsx","../node_modules/@coreui/react/src/components/form/CFormControlValidation.tsx","../node_modules/@coreui/react/src/components/form/CFormFeedback.tsx","../node_modules/@coreui/react/src/components/form/CFormLabel.tsx","../node_modules/@coreui/react/src/components/grid/CCol.tsx","../node_modules/@coreui/react/src/components/grid/CRow.tsx"],"sourcesContent":["import React, { forwardRef, InputHTMLAttributes, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormLabel } from './CFormLabel'\n\nexport interface CFormSwitchProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n   */\n  id?: string\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * The element represents a caption for a component.\n   */\n  label?: string | ReactNode\n  /**\n   * Put switch on the opposite side.\n   *\n   * @sinve 4.7.0\n   */\n  reverse?: boolean\n  /**\n   * Size the component large or extra large. Works only with `switch`.\n   */\n  size?: 'lg' | 'xl'\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'checkbox' | 'radio'\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormSwitch = forwardRef<HTMLInputElement, CFormSwitchProps>(\n  ({ className, id, invalid, label, reverse, size, type = 'checkbox', valid, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'form-check form-switch',\n          {\n            'form-check-reverse': reverse,\n            [`form-switch-${size}`]: size,\n            'is-invalid': invalid,\n            'is-valid': valid,\n          },\n          className,\n        )}\n      >\n        <input\n          type={type}\n          className={classNames('form-check-input', {\n            'is-invalid': invalid,\n            'is-valid': valid,\n          })}\n          id={id}\n          {...rest}\n          ref={ref}\n        />\n        {label && (\n          <CFormLabel customClassName=\"form-check-label\" {...(id && { htmlFor: id })}>\n            {label}\n          </CFormLabel>\n        )}\n      </div>\n    )\n  },\n)\n\nCFormSwitch.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  invalid: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  size: PropTypes.oneOf(['lg', 'xl']),\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  valid: PropTypes.bool,\n}\n\nCFormSwitch.displayName = 'CFormSwitch'\n","import React from 'react'\nimport { CCard, CCardBody, CCardHeader, CCol, CFormCheck, CFormSwitch, CRow } from '@coreui/react'\nimport { DocsExample } from '../../../components'\n\nconst ChecksRadios = () => {\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Checkbox</strong>\n          </CCardHeader>\n          <CCardBody>\n            <DocsExample href=\"forms/checks-radios\">\n              <CFormCheck id=\"flexCheckDefault\" label=\"Default checkbox\" />\n              <CFormCheck id=\"flexCheckChecked\" label=\"Checked checkbox\" defaultChecked />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Checkbox</strong> <small>Disabled</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Add the <code>disabled</code> attribute and the associated <code>&lt;label&gt;</code>s\n              are automatically styled to match with a lighter color to help indicate the\n              input&#39;s state.\n            </p>\n            <DocsExample href=\"forms/checks-radios#disabled\">\n              <CFormCheck label=\"Disabled checkbox\" disabled />\n              <CFormCheck label=\"Disabled checked checkbox\" defaultChecked disabled />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Radio</strong>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Add the <code>disabled</code> attribute and the associated <code>&lt;label&gt;</code>s\n              are automatically styled to match with a lighter color to help indicate the\n              input&#39;s state.\n            </p>\n            <DocsExample href=\"forms/checks-radios#radios\">\n              <CFormCheck\n                type=\"radio\"\n                name=\"flexRadioDefault\"\n                id=\"flexRadioDefault1\"\n                label=\"Default radio\"\n              />\n              <CFormCheck\n                type=\"radio\"\n                name=\"flexRadioDefault\"\n                id=\"flexRadioDefault2\"\n                label=\"Checked radio\"\n                defaultChecked\n              />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Radio</strong> <small>Disabled</small>\n          </CCardHeader>\n          <CCardBody>\n            <DocsExample href=\"forms/checks-radios#disabled-1\">\n              <CFormCheck\n                type=\"radio\"\n                name=\"flexRadioDisabled\"\n                id=\"flexRadioDisabled\"\n                label=\"Disabled radio\"\n                disabled\n              />\n              <CFormCheck\n                type=\"radio\"\n                name=\"flexRadioDisabled\"\n                id=\"flexRadioCheckedDisabled\"\n                label=\"Disabled checked radio\"\n                defaultChecked\n                disabled\n              />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Switches</strong>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              A switch has the markup of a custom checkbox but uses the <code>switch</code> boolean\n              properly to render a toggle switch. Switches also support the <code>disabled</code>{' '}\n              attribute.\n            </p>\n            <DocsExample href=\"forms/checks-radios#switches\">\n              <CFormSwitch label=\"Default switch checkbox input\" id=\"formSwitchCheckDefault\" />\n              <CFormSwitch\n                label=\"Checked switch checkbox input\"\n                id=\"formSwitchCheckChecked\"\n                defaultChecked\n              />\n              <CFormSwitch\n                label=\"Disabled switch checkbox input\"\n                id=\"formSwitchCheckDisabled\"\n                disabled\n              />\n              <CFormSwitch\n                label=\"Disabled checked switch checkbox input\"\n                id=\"formSwitchCheckCheckedDisabled\"\n                defaultChecked\n                disabled\n              />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Switches</strong> <small>Sizes</small>\n          </CCardHeader>\n          <CCardBody>\n            <DocsExample href=\"forms/checks-radios#sizes\">\n              <CFormSwitch label=\"Default switch checkbox input\" id=\"formSwitchCheckDefault\" />\n              <CFormSwitch\n                size=\"lg\"\n                label=\"Large switch checkbox input\"\n                id=\"formSwitchCheckDefaultLg\"\n              />\n              <CFormSwitch\n                size=\"xl\"\n                label=\"Extra large switch checkbox input\"\n                id=\"formSwitchCheckDefaultXL\"\n              />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Checks and Radios</strong> <small>Default layout (stacked)</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              By default, any number of checkboxes and radios that are immediate sibling will be\n              vertically stacked and appropriately spaced.\n            </p>\n            <DocsExample href=\"forms/checks-radios#default-stacked\">\n              <CFormCheck id=\"defaultCheck1\" label=\"Default checkbox\" />\n              <CFormCheck id=\"defaultCheck2\" label=\"Disabled checkbox\" disabled />\n            </DocsExample>\n            <DocsExample href=\"forms/checks-radios#default-stacked\">\n              <CFormCheck\n                type=\"radio\"\n                name=\"exampleRadios\"\n                id=\"exampleRadios1\"\n                value=\"option1\"\n                label=\"Default radio\"\n                defaultChecked\n              />\n              <CFormCheck\n                type=\"radio\"\n                name=\"exampleRadios\"\n                id=\"exampleRadios2\"\n                value=\"option2\"\n                label=\"Second default radio\"\n              />\n              <CFormCheck\n                type=\"radio\"\n                name=\"exampleRadios\"\n                id=\"exampleRadios3\"\n                value=\"option3\"\n                label=\"Disabled radio\"\n                disabled\n              />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Checks and Radios</strong> <small>Inline</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Group checkboxes or radios on the same horizontal row by adding <code>inline</code>{' '}\n              boolean property to any <code>&lt;CFormCheck&gt;</code>.\n            </p>\n            <DocsExample href=\"forms/checks-radios#inline\">\n              <CFormCheck inline id=\"inlineCheckbox1\" value=\"option1\" label=\"1\" />\n              <CFormCheck inline id=\"inlineCheckbox2\" value=\"option2\" label=\"2\" />\n              <CFormCheck\n                inline\n                id=\"inlineCheckbox3\"\n                value=\"option3\"\n                label=\"3 (disabled)\"\n                disabled\n              />\n            </DocsExample>\n            <DocsExample href=\"forms/checks-radios#inline\">\n              <CFormCheck\n                inline\n                type=\"radio\"\n                name=\"inlineRadioOptions\"\n                id=\"inlineCheckbox1\"\n                value=\"option1\"\n                label=\"1\"\n              />\n              <CFormCheck\n                inline\n                type=\"radio\"\n                name=\"inlineRadioOptions\"\n                id=\"inlineCheckbox2\"\n                value=\"option2\"\n                label=\"2\"\n              />\n              <CFormCheck\n                inline\n                type=\"radio\"\n                name=\"inlineRadioOptions\"\n                id=\"inlineCheckbox3\"\n                value=\"option3\"\n                label=\"3 (disabled)\"\n                disabled\n              />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Checks and Radios</strong> <small>Without labels</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Remember to still provide some form of accessible name for assistive technologies (for\n              instance, using <code>aria-label</code>).\n            </p>\n            <DocsExample href=\"forms/checks-radios#without-labels\">\n              <div>\n                <CFormCheck id=\"checkboxNoLabel\" value=\"\" aria-label=\"...\" />\n              </div>\n              <div>\n                <CFormCheck\n                  type=\"radio\"\n                  name=\"radioNoLabel\"\n                  id=\"radioNoLabel\"\n                  value=\"\"\n                  aria-label=\"...\"\n                />\n              </div>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Toggle buttons</strong>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Create button-like checkboxes and radio buttons by using <code>button</code> boolean\n              property on the <code>&lt;CFormCheck&gt;</code> component. These toggle buttons can\n              further be grouped in a button group if needed.\n            </p>\n            <DocsExample href=\"forms/checks-radios#toggle-buttons\">\n              <CFormCheck\n                button={{ color: 'primary ' }}\n                id=\"btn-check\"\n                autoComplete=\"off\"\n                label=\"Single toggle\"\n              />\n            </DocsExample>\n            <DocsExample href=\"forms/checks-radios#toggle-buttons\">\n              <CFormCheck\n                button={{ color: 'primary ' }}\n                id=\"btn-check-2\"\n                autoComplete=\"off\"\n                label=\"Checked\"\n                defaultChecked\n              />\n            </DocsExample>\n            <DocsExample href=\"forms/checks-radios#toggle-buttons\">\n              <CFormCheck\n                button={{ color: 'primary ' }}\n                id=\"btn-check-3\"\n                autoComplete=\"off\"\n                label=\"Disabled\"\n                disabled\n              />\n            </DocsExample>\n            <h3>Radio toggle buttons</h3>\n            <DocsExample href=\"forms/checks-radios#toggle-buttons\">\n              <CFormCheck\n                button={{ color: 'secondary' }}\n                type=\"radio\"\n                name=\"options\"\n                id=\"option1\"\n                autoComplete=\"off\"\n                label=\"Checked\"\n                defaultChecked\n              />\n              <CFormCheck\n                button={{ color: 'secondary' }}\n                type=\"radio\"\n                name=\"options\"\n                id=\"option2\"\n                autoComplete=\"off\"\n                label=\"Radio\"\n              />\n              <CFormCheck\n                button={{ color: 'secondary' }}\n                type=\"radio\"\n                name=\"options\"\n                id=\"option3\"\n                autoComplete=\"off\"\n                label=\"Radio\"\n                disabled\n              />\n              <CFormCheck\n                button={{ color: 'secondary' }}\n                type=\"radio\"\n                name=\"options\"\n                id=\"option4\"\n                autoComplete=\"off\"\n                label=\"Radio\"\n              />\n            </DocsExample>\n            <h3>Outlined styles</h3>\n            <p className=\"text-body-secondary small\">\n              Different variants of button, such at the various outlined styles, are supported.\n            </p>\n            <DocsExample href=\"forms/checks-radios#toggle-buttons\">\n              <div>\n                <CFormCheck\n                  button={{ color: 'primary', variant: 'outline' }}\n                  id=\"btn-check-outlined\"\n                  autoComplete=\"off\"\n                  label=\"Single toggle\"\n                />\n              </div>\n              <div>\n                <CFormCheck\n                  button={{ color: 'secondary', variant: 'outline' }}\n                  id=\"btn-check-2-outlined\"\n                  autoComplete=\"off\"\n                  label=\"Checked\"\n                  defaultChecked\n                />\n              </div>\n              <div>\n                <CFormCheck\n                  button={{ color: 'success', variant: 'outline' }}\n                  type=\"radio\"\n                  name=\"options-outlined\"\n                  id=\"success-outlined\"\n                  autoComplete=\"off\"\n                  label=\"Radio\"\n                  defaultChecked\n                />\n                <CFormCheck\n                  button={{ color: 'danger', variant: 'outline' }}\n                  type=\"radio\"\n                  name=\"options-outlined\"\n                  id=\"danger-outlined\"\n                  autoComplete=\"off\"\n                  label=\"Radio\"\n                />\n              </div>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default ChecksRadios\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n  /**\n   * Sets the component's color scheme to one of CoreUI's themed colors, ensuring the text color contrast adheres to the WCAG 4.5:1 contrast ratio standard for accessibility.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   * @since 5.0.0-rc.3\n   */\n  textBgColor?: Colors\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textBgColor, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n            [`text-bg-${textBgColor}`]: textBgColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textBgColor: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { forwardRef, InputHTMLAttributes, ReactNode, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormLabel } from './CFormLabel'\n\nimport { useForkedRef } from '../../hooks'\nimport type { Colors, Shapes } from '../../types'\n\nexport type ButtonObject = {\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Select the shape of the component.\n   *\n   * @type 'rounded' | 'rounded-top' | 'rounded-end' | 'rounded-bottom' | 'rounded-start' | 'rounded-circle' | 'rounded-pill' | 'rounded-0' | 'rounded-1' | 'rounded-2' | 'rounded-3' | string\n   */\n  shape?: Shapes\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Set the button variant to an outlined button or a ghost button.\n   */\n  variant?: 'outline' | 'ghost'\n}\n\nexport interface CFormCheckProps\n  extends CFormControlValidationProps,\n    InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Create button-like checkboxes and radio buttons.\n   */\n  button?: ButtonObject\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets hit area to the full area of the component.\n   */\n  hitArea?: 'full'\n  /**\n   * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n   */\n  id?: string\n  /**\n   * Input Checkbox indeterminate Property.\n   */\n  indeterminate?: boolean\n  /**\n   * Group checkboxes or radios on the same horizontal row.\n   */\n  inline?: boolean\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * The element represents a caption for a component.\n   */\n  label?: string | ReactNode\n  /**\n   * Put checkboxes or radios on the opposite side.\n   *\n   * @sinve 4.7.0\n   */\n  reverse?: boolean\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'checkbox' | 'radio'\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormCheck = forwardRef<HTMLInputElement, CFormCheckProps>(\n  (\n    {\n      className,\n      button,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingLabel,\n      tooltipFeedback,\n      hitArea,\n      id,\n      indeterminate,\n      inline,\n      invalid,\n      label,\n      reverse,\n      type = 'checkbox',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null)\n    const forkedRef = useForkedRef(ref, inputRef)\n\n    useEffect(() => {\n      if (inputRef.current && indeterminate) {\n        inputRef.current.indeterminate = indeterminate\n      }\n    }, [indeterminate, inputRef.current])\n\n    const FormControl = () => (\n      <input\n        type={type}\n        className={classNames(button ? 'btn-check' : 'form-check-input', {\n          'is-invalid': invalid,\n          'is-valid': valid,\n          'me-2': hitArea,\n        })}\n        id={id}\n        {...rest}\n        ref={forkedRef}\n      />\n    )\n\n    const FormValidation = () => (\n      <CFormControlValidation\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingLabel={floatingLabel}\n        invalid={invalid}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      />\n    )\n\n    const FormLabel = () => (\n      <CFormLabel\n        customClassName={classNames(\n          button\n            ? classNames(\n                'btn',\n                button.variant ? `btn-${button.variant}-${button.color}` : `btn-${button.color}`,\n                {\n                  [`btn-${button.size}`]: button.size,\n                },\n                `${button.shape}`,\n              )\n            : 'form-check-label',\n        )}\n        {...(id && { htmlFor: id })}\n      >\n        {label}\n      </CFormLabel>\n    )\n\n    const FormCheck = () => {\n      if (button) {\n        return (\n          <>\n            <FormControl />\n            {label && <FormLabel />}\n            <FormValidation />\n          </>\n        )\n      }\n\n      if (label) {\n        return hitArea ? (\n          <>\n            <FormControl />\n            <CFormLabel\n              customClassName={classNames('form-check-label stretched-link', className)}\n              {...(id && { htmlFor: id })}\n            >\n              {label}\n            </CFormLabel>\n            <FormValidation />\n          </>\n        ) : (\n          <div\n            className={classNames(\n              'form-check',\n              {\n                'form-check-inline': inline,\n                'form-check-reverse': reverse,\n                'is-invalid': invalid,\n                'is-valid': valid,\n              },\n              className,\n            )}\n          >\n            <FormControl />\n            <FormLabel />\n            <FormValidation />\n          </div>\n        )\n      }\n\n      return <FormControl />\n    }\n\n    return <FormCheck />\n  },\n)\n\nCFormCheck.propTypes = {\n  button: PropTypes.object,\n  className: PropTypes.string,\n  hitArea: PropTypes.oneOf(['full']),\n  id: PropTypes.string,\n  indeterminate: PropTypes.bool,\n  inline: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormCheck.displayName = 'CFormCheck'\n","import React, { FC, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CFormFeedback } from './CFormFeedback'\n\nexport interface CFormControlValidationProps {\n  /**\n   * @ignore\n   */\n  describedby?: string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedback?: ReactNode | string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedbackInvalid?: ReactNode | string\n  /**\n   * Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  feedbackValid?: ReactNode | string\n  /**\n   * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  floatingLabel?: ReactNode | string\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * Display validation feedback in a styled tooltip.\n   *\n   * @since 4.2.0\n   */\n  tooltipFeedback?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormControlValidation: FC<CFormControlValidationProps> = ({\n  describedby,\n  feedback,\n  feedbackInvalid,\n  feedbackValid,\n  invalid,\n  tooltipFeedback,\n  valid,\n}) => {\n  return (\n    <>\n      {feedback && (valid || invalid) && (\n        <CFormFeedback\n          {...(invalid && { id: describedby })}\n          invalid={invalid}\n          tooltip={tooltipFeedback}\n          valid={valid}\n        >\n          {feedback}\n        </CFormFeedback>\n      )}\n      {feedbackInvalid && (\n        <CFormFeedback id={describedby} invalid tooltip={tooltipFeedback}>\n          {feedbackInvalid}\n        </CFormFeedback>\n      )}\n      {feedbackValid && (\n        <CFormFeedback valid tooltip={tooltipFeedback}>\n          {feedbackValid}\n        </CFormFeedback>\n      )}\n    </>\n  )\n}\n\nCFormControlValidation.propTypes = {\n  describedby: PropTypes.string,\n  feedback: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackValid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackInvalid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  invalid: PropTypes.bool,\n  tooltipFeedback: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormControlValidation.displayName = 'CFormControlValidation'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CFormFeedbackProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  invalid?: boolean\n  /**\n   * If your form layout allows it, you can display validation feedback in a styled tooltip.\n   */\n  tooltip?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormFeedback: PolymorphicRefForwardingComponent<'div', CFormFeedbackProps> =\n  forwardRef<HTMLDivElement | HTMLSpanElement, CFormFeedbackProps>(\n    ({ children, as: Component = 'div', className, invalid, tooltip, valid, ...rest }, ref) => {\n      return (\n        <Component\n          className={classNames(\n            {\n              [`invalid-${tooltip ? 'tooltip' : 'feedback'}`]: invalid,\n              [`valid-${tooltip ? 'tooltip' : 'feedback'}`]: valid,\n            },\n            className,\n          )}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </Component>\n      )\n    },\n  )\n\nCFormFeedback.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  invalid: PropTypes.bool,\n  tooltip: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormFeedback.displayName = 'CFormFeedback'\n","import React, { forwardRef, LabelHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormLabelProps extends LabelHTMLAttributes<HTMLLabelElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * A string of all className you want to be applied to the component, and override standard className value.\n   */\n  customClassName?: string\n}\n\nexport const CFormLabel = forwardRef<HTMLLabelElement, CFormLabelProps>(\n  ({ children, className, customClassName, ...rest }, ref) => {\n    return (\n      <label className={customClassName ?? classNames('form-label', className)} {...rest} ref={ref}>\n        {children}\n      </label>\n    )\n  },\n)\n\nCFormLabel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  customClassName: PropTypes.string,\n}\n\nCFormLabel.displayName = 'CFormLabel'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\ntype Span = 'auto' | number | string | boolean | null\n\ntype BPObject = {\n  span?: Span\n  offset?: number | string | null\n  order?: 'first' | 'last' | number | string | null\n}\n\ntype Col = Span | BPObject\n\nexport interface CColProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xs?: Col\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  sm?: Col\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  md?: Col\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  lg?: Col\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xl?: Col\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xxl?: Col\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CCol = forwardRef<HTMLDivElement, CColProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n        repsonsiveClassNames.push(`col${infix}-${breakpoint}`)\n      }\n\n      if (typeof breakpoint === 'boolean') {\n        repsonsiveClassNames.push(`col${infix}`)\n      }\n\n      if (breakpoint && typeof breakpoint === 'object') {\n        if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n          repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`)\n        }\n\n        if (typeof breakpoint.span === 'boolean') {\n          repsonsiveClassNames.push(`col${infix}`)\n        }\n\n        if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n          repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`)\n        }\n\n        if (typeof breakpoint.offset === 'number') {\n          repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`)\n        }\n      }\n    })\n\n    return (\n      <div\n        className={classNames(\n          repsonsiveClassNames.length > 0 ? repsonsiveClassNames : 'col',\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nconst span = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.oneOf(['auto']),\n])\n\nconst col = PropTypes.oneOfType([\n  span,\n  PropTypes.shape({\n    span: span,\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    order: PropTypes.oneOfType([\n      PropTypes.oneOf(['first', 'last']),\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  }),\n])\n\nCCol.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: col,\n  sm: col,\n  md: col,\n  lg: col,\n  xl: col,\n  xxl: col,\n}\n\nCCol.displayName = 'CCol'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport type BPObject = {\n  cols?: 'auto' | number | string | null\n  gutter?: number | string | null\n  gutterX?: number | string | null\n  gutterY?: number | string | null\n}\n\nexport interface CRowProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xs?: BPObject\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  sm?: BPObject\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  md?: BPObject\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  lg?: BPObject\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xl?: BPObject\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xxl?: BPObject\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CRow = forwardRef<HTMLDivElement, CRowProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'object') {\n        if (breakpoint.cols) {\n          repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`)\n        }\n\n        if (typeof breakpoint.gutter === 'number') {\n          repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`)\n        }\n\n        if (typeof breakpoint.gutterX === 'number') {\n          repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`)\n        }\n\n        if (typeof breakpoint.gutterY === 'number') {\n          repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`)\n        }\n      }\n    })\n\n    return (\n      <div className={classNames('row', repsonsiveClassNames, className)} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nconst bp = PropTypes.shape({\n  cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n})\n\nCRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: bp,\n  sm: bp,\n  md: bp,\n  lg: bp,\n  xl: bp,\n  xxl: bp,\n}\n\nCRow.displayName = 'CRow'\n"],"names":["CFormSwitch","forwardRef","_a","ref","className","id","invalid","label","reverse","size","_c","type","valid","rest","__rest","React","classNames","_b","concat","__assign","CFormLabel","customClassName","htmlFor","propTypes","PropTypes","displayName","ChecksRadios","_jsxs","CRow","children","_jsx","CCol","xs","CCard","CCardHeader","CCardBody","DocsExample","href","CFormCheck","defaultChecked","disabled","name","value","inline","button","color","autoComplete","variant","textBgColor","textColor","colorPropType","as","Component","feedback","feedbackInvalid","feedbackValid","floatingLabel","tooltipFeedback","hitArea","indeterminate","inputRef","useRef","forkedRef","useForkedRef","useEffect","current","FormControl","FormValidation","CFormControlValidation","describedby","FormLabel","shape","CFormFeedback","tooltip","BREAKPOINTS","repsonsiveClassNames","forEach","bp","breakpoint","infix","push","span","order","offset","length","col","sm","md","lg","xl","xxl","cols","gutter","gutterX","gutterY"],"sourceRoot":""}