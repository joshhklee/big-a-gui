{"version":3,"file":"static/js/8061.bc7e5489.chunk.js","mappings":"+OAmDA,QA/CA,WACE,MAAOA,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,CACvCC,KAAM,iBAEDC,EAAQC,IAAaH,EAAAA,EAAAA,UAAS,CAAC,GA+BtC,OACEI,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,SA1BYC,UACnBC,EAAMC,iBACNC,QAAQC,IAAI,sBACZ,IACE,MAAMC,QAAiBC,EAAAA,EAAAA,GAAM,CAC3BC,OAAQ,OACRC,IAAK,0CACLC,KAAM,IAAIC,gBAAgB,CAAEC,WAAYpB,EAASG,OACjDkB,QAAS,CAAE,eAAgB,uCAGL,MAApBP,EAASQ,QAAmBR,EAASI,KAAKK,SAAS,UAKrDX,QAAQC,IAAIC,EAASI,MACrBb,EAAU,CAAEF,KAAMW,EAASI,MAAQ,wBALnCM,MAAM,kBACNZ,QAAQC,IAAIC,EAASI,MACrBb,EAAU,CAAC,GAKf,CAAE,MAAOoB,GACPb,QAAQa,MAAM,sBAAuBA,GACrCpB,EAAU,CAAEF,KAAM,2BACpB,GAI8BuB,SAAA,EAC5BpB,EAAAA,EAAAA,MAAA,OAAKqB,UAAU,OAAMD,SAAA,EACnBE,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,OAAMJ,SAAC,WAC3BE,EAAAA,EAAAA,KAACG,EAAAA,EAAU,CAACC,KAAK,OAAOC,GAAG,OAAOC,KAAK,OAAOC,MAAOnC,EAASG,KAAMiC,SAjCpD1B,IACpBT,EAAY,IAAKD,EAAU,CAACU,EAAM2B,OAAOH,MAAOxB,EAAM2B,OAAOF,OAAQ,EAgC2BG,UAAWC,QAAQnC,EAAOD,QACrHC,EAAOD,OAAQyB,EAAAA,EAAAA,KAACY,EAAAA,EAAM,CAACC,MAAM,SAAQf,SAAEtB,EAAOD,WAEjDyB,EAAAA,EAAAA,KAACc,EAAAA,EAAO,CAACV,KAAK,SAASS,MAAM,UAASf,SAAC,aAG7C,C,wICTac,GAASG,EAAAA,EAAAA,aACpB,SACEC,EAUAC,GATE,IAAAnB,EAAQkB,EAAAlB,SACRC,EAASiB,EAAAjB,UACTmB,EAAAF,EAAAH,MAAAA,OAAQ,IAAAK,EAAA,UAASA,EACjBC,EAAWH,EAAAG,YACXC,EAAOJ,EAAAI,QACPC,EAAAL,EAAAM,QAAAA,OAAO,IAAAD,GAAOA,EACdE,EAAOP,EAAAO,QACJC,GAAIC,EAAAA,EAAAA,IAAAT,EART,8EAYMU,GAAWC,EAAAA,EAAAA,QAAuB,MAClCC,GAAYC,EAAAA,EAAAA,IAAaZ,EAAKS,GAC9BI,GAAyBxD,EAAAA,EAAAA,UAASgD,GAAjCS,EAAQD,EAAA,GAAEE,EAAUF,EAAA,GAM3B,OAJAG,EAAAA,EAAAA,YAAU,WACRD,EAAWV,EACb,GAAG,CAACA,IAGFY,EAAAA,cAACC,EAAAA,GAAU,CACTC,GAAIL,EACJM,cACA,EAAAC,QAASZ,EACTa,OAAQhB,EACRiB,QAAS,IACTC,eAEC,aAACC,GAAU,OACVR,EAAAA,cAAA,OAAAS,EAAAA,EAAAA,IAAA,CACE5C,WAAW6C,EAAAA,EAAAA,GACT,QACY,UAAZxB,EAAsB,MAAMyB,OAAAhC,EAAkB,eAAG,SAAAgC,OAAShC,GAC1D,CACE,yBAA0BM,EAC1B2B,KAAgB,YAAVJ,GAER3C,GAEFgD,KAAK,SACDvB,EAAI,CACRP,IAAKW,IAEJ9B,EACAqB,GAAee,EAAAA,cAACc,EAAAA,EAAY,CAACC,QAAS,WAAM,OAAAjB,GAAW,EAAM,IAhBtD,GAqBlB,IAGFpB,EAAOsC,UAAY,CACjBpD,SAAUqD,IAAAA,KACVpD,UAAWoD,IAAAA,OACXtC,MAAOuC,EAAAA,GAAcC,WACrBlC,YAAagC,IAAAA,KACb5B,QAAS4B,IAAAA,KACT/B,QAAS+B,IAAAA,OACT7B,QAAS6B,IAAAA,MAGXvC,EAAO0C,YAAc,Q,4FC1FR3E,GAAQoC,EAAAA,EAAAA,aACnB,SAACC,EAA6CC,GAA3C,IAAAnB,EAAQkB,EAAAlB,SAAEC,EAASiB,EAAAjB,UAAEwD,EAASvC,EAAAuC,UAAK/B,GAArCC,EAAAA,EAAAA,IAAAT,EAAA,sCACC,OACEkB,EAAAA,cACE,QAAAS,EAAAA,EAAAA,IAAA,CAAA5C,WAAW6C,EAAAA,EAAAA,GAAW,CAAE,gBAAiBW,GAAaxD,SAAcyD,GAChEhC,EACJ,CAAAP,IAAKA,IAEJnB,EAGP,IAGFnB,EAAMuE,UAAY,CAChBpD,SAAUqD,IAAAA,KACVpD,UAAWoD,IAAAA,OACXI,UAAWJ,IAAAA,MAGbxE,EAAM2E,YAAc,O,4FCePG,EAA0D,SAACzC,GACtE,IAAA0C,EAAW1C,EAAA0C,YACXC,EAAQ3C,EAAA2C,SACRC,EAAe5C,EAAA4C,gBACfC,EAAa7C,EAAA6C,cACbC,EAAO9C,EAAA8C,QACPC,EAAe/C,EAAA+C,gBACfC,EAAKhD,EAAAgD,MAEL,OACE9B,EAAAA,cAAAA,EAAAA,SAAA,KACGyB,IAAaK,GAASF,IACrB5B,EAAAA,cAAC+B,EAAAA,GACKtB,EAAAA,EAAAA,IAAC,CAAD,EAACmB,GAAW,CAAEzD,GAAIqD,GACtB,CAAAI,QAASA,EACTI,QAASH,EACTC,MAAOA,IAENL,GAGJC,GACC1B,EAAAA,cAAC+B,EAAAA,EAAa,CAAC5D,GAAIqD,EAAaI,SAAO,EAACI,QAASH,GAC9CH,GAGJC,GACC3B,EAAAA,cAAC+B,EAAAA,EAAa,CAACD,OAAM,EAAAE,QAASH,GAC3BF,GAKX,EAEAJ,EAAuBP,UAAY,CACjCQ,YAAaP,IAAAA,OACbQ,SAAUR,IAAAA,UAAoB,CAACA,IAAAA,KAAgBA,IAAAA,SAC/CU,cAAeV,IAAAA,UAAoB,CAACA,IAAAA,KAAgBA,IAAAA,SACpDS,gBAAiBT,IAAAA,UAAoB,CAACA,IAAAA,KAAgBA,IAAAA,SACtDW,QAASX,IAAAA,KACTY,gBAAiBZ,IAAAA,KACjBa,MAAOb,IAAAA,MAGTM,EAAuBH,YAAc,wB,6HC9ExBa,GAAsEpD,EAAAA,EAAAA,aAGjF,SAACC,EAAyDC,GAAvD,IAAAnB,EAAQkB,EAAAlB,SAAEoB,EAAqBF,EAAAoD,GAAjBC,OAAY,IAAAnD,EAAA,MAAKA,EAAEnB,EAASiB,EAAAjB,UAAKyB,GAAIC,EAAAA,EAAAA,IAAAT,EAArD,+BACD,OACEkB,EAAAA,cAACmC,GAAS1B,EAAAA,EAAAA,IAAA,CAAC5C,WAAW6C,EAAAA,EAAAA,GAAW,YAAa7C,IAAgByB,EAAI,CAAEP,IAAKA,IACtEnB,EAGP,IAEAqE,EAAUjB,UAAY,CACpBkB,GAAIjB,IAAAA,YACJrD,SAAUqD,IAAAA,KACVpD,UAAWoD,IAAAA,QAGbgB,EAAUb,YAAc,YCSjB,IAAMgB,EAAoD,SAACtD,GAChE,IAAAlB,EAAQkB,EAAAlB,SACR4D,EAAW1C,EAAA0C,YACXC,EAAQ3C,EAAA2C,SACRC,EAAe5C,EAAA4C,gBACfC,EAAa7C,EAAA6C,cACbU,EAAiBvD,EAAAuD,kBACjBC,EAAaxD,EAAAwD,cACbnE,EAAEW,EAAAX,GACFyD,EAAO9C,EAAA8C,QACPW,EAAKzD,EAAAyD,MACLC,EAAI1D,EAAA0D,KACJX,EAAe/C,EAAA+C,gBACfC,EAAKhD,EAAAgD,MAECW,EAAwB,WAAM,OAClCzC,EAAAA,cAACuB,EAAAA,EACC,CAAAC,YAAaA,EACbC,SAAUA,EACVC,gBAAiBA,EACjBC,cAAeA,EACfW,cAAeA,EACfV,QAASA,EACTC,gBAAiBA,EACjBC,MAAOA,GAEV,EACD,OAAOQ,EACLtC,EAAAA,cAAC0C,EAAAA,EAAa,CAAC7E,UAAWwE,GACvBzE,EACDoC,EAAAA,cAACjC,EAAAA,EAAU,CAACC,QAASG,GAAKoE,GAASD,GAClCE,GAAQxC,EAAAA,cAACiC,EAAS,CAAC9D,GAAIqD,GAAcgB,GACtCxC,EAAAA,cAACyC,EAAwB,OAG3BzC,EAAAA,cAAAA,EAAAA,SAAA,KACGuC,GAASvC,EAAAA,cAACjC,EAAAA,EAAU,CAACC,QAASG,GAAKoE,GACnC3E,EACA4E,GAAQxC,EAAAA,cAACiC,EAAS,CAAC9D,GAAIqD,GAAcgB,GACtCxC,EAAAA,cAACyC,EAAqB,MAG5B,EAEAL,EAAoBpB,WAClBP,EAAAA,EAAAA,IAAA,CAAA7C,SAAUqD,IAAAA,KACVoB,kBAAmBpB,IAAAA,OACnBqB,cAAerB,IAAAA,UAAoB,CAACA,IAAAA,KAAgBA,IAAAA,SACpDsB,MAAOtB,IAAAA,UAAoB,CAACA,IAAAA,KAAgBA,IAAAA,SAC5CuB,KAAMvB,IAAAA,UAAoB,CAACA,IAAAA,KAAgBA,IAAAA,UACxCM,EAAAA,EAAuBP,WAG5BoB,EAAoBhB,YAAc,qB,4FClErBW,GACXlD,EAAAA,EAAAA,aACE,SAACC,EAAkFC,G,MAAhFnB,EAAQkB,EAAAlB,SAAEuB,EAAqBL,EAAAoD,GAAjBC,OAAY,IAAAhD,EAAA,MAAKA,EAAEtB,EAASiB,EAAAjB,UAAE+D,EAAO9C,EAAA8C,QAAEI,EAAOlD,EAAAkD,QAAEF,EAAKhD,EAAAgD,MAAKxC,GAA1EC,EAAAA,EAAAA,IAAAT,EAAA,2DACC,OACEkB,EAAAA,cAACmC,GACC1B,EAAAA,EAAAA,IAAA,CAAA5C,WAAW6C,EAAAA,EAAAA,IAAU1B,EAAA,GAEjBA,EAAC,WAAW2B,OAAAqB,EAAU,UAAY,aAAeJ,EACjD5C,EAAC,SAAS2B,OAAAqB,EAAU,UAAY,aAAeF,EAAK,GAEtDjE,IAEEyB,EACJ,CAAAP,IAAKA,IAEJnB,EAGP,IAGJmE,EAAcf,UAAY,CACxBkB,GAAIjB,IAAAA,YACJrD,SAAUqD,IAAAA,KACVpD,UAAWoD,IAAAA,OACXW,QAASX,IAAAA,KACTe,QAASf,IAAAA,KACTa,MAAOb,IAAAA,MAGTc,EAAcX,YAAc,e,4FCjDfsB,GAAgB7D,EAAAA,EAAAA,aAC3B,SAACC,EAAkCC,GAAhC,IAAAnB,EAAQkB,EAAAlB,SAAEC,EAASiB,EAAAjB,UAAKyB,GAA1BC,EAAAA,EAAAA,IAAAT,EAAA,0BACC,OACEkB,EAAAA,cAAA,OAAAS,EAAAA,EAAAA,IAAA,CAAK5C,WAAW6C,EAAAA,EAAAA,GAAW,gBAAiB7C,IAAgByB,EAAI,CAAEP,IAAKA,IACpEnB,EAGP,IAGF8E,EAAc1B,UAAY,CACxBpD,SAAUqD,IAAAA,KACVpD,UAAWoD,IAAAA,QAGbyB,EAActB,YAAc,e,uGC6BfnD,GAAaY,EAAAA,EAAAA,aACxB,SACEC,EAqBAC,G,MApBEnB,EAAQkB,EAAAlB,SACRC,EAASiB,EAAAjB,UACTsB,EAAaL,EAAA6D,MAAbA,OAAK,IAAAxD,GAAQA,EACbsC,EAAQ3C,EAAA2C,SACRC,EAAe5C,EAAA4C,gBACfC,EAAa7C,EAAA6C,cACbU,EAAiBvD,EAAAuD,kBACjBC,EAAaxD,EAAAwD,cACbnE,EAAEW,EAAAX,GACFyD,EAAO9C,EAAA8C,QACPW,EAAKzD,EAAAyD,MACLjE,EAAQQ,EAAAR,SACRsE,EAAS9D,EAAA8D,UACTC,EAAI/D,EAAA+D,KACJL,EAAI1D,EAAA0D,KACJX,EAAe/C,EAAA+C,gBACfjC,EAAAd,EAAAZ,KAAAA,OAAI,IAAA0B,EAAG,OAAMA,EACbkC,EAAKhD,EAAAgD,MACFxC,GAAIC,EAAAA,EAAAA,IAAAT,EAnBT,gNAuBMgE,GAAoB1G,EAAAA,EAAAA,YAAnBiC,EAAKyE,EAAA,GAAEC,EAAQD,EAAA,GAWtB,OATA/C,EAAAA,EAAAA,YAAU,WACR,IAAMiD,EAAYC,YAChB,WAAM,OAAA5E,GAASC,GAAYA,EAASD,EAAM,GACzB,kBAAVsE,EAAqBA,EAAQ,KAGtC,OAAO,WAAM,OAAAO,aAAaF,EAAU,CACtC,GAAG,CAAC3E,IAGF2B,EAAAA,cAACoC,EAAAA,EACC,CAAAZ,YAAalC,EAAK,oBAClBmC,SAAUA,EACVC,gBAAiBA,EACjBC,cAAeA,EACfU,kBAAmBA,EACnBC,cAAeA,EACfnE,GAAIA,EACJyD,QAASA,EACTW,MAAOA,EACPC,KAAMA,EACNX,gBAAiBA,EACjBC,MAAOA,GAEP9B,EAAAA,cAAA,SAAAS,EAAAA,EAAAA,IAAA,CACE5C,WAAW6C,EAAAA,EAAAA,GACTkC,EAAY,yBAA2B,gBAAc5D,EAAA,GAEnDA,EAAC,gBAAgB2B,OAAAkC,IAASA,EAC1B7D,EAAoB,sBAAW,UAATd,EACtBc,EAAA,cAAc4C,EACd5C,EAAA,YAAY8C,EAAK,GAEnBjE,GAEFM,GAAIA,EACJD,KAAMA,EACNI,SAAU,SAAC1B,GAAU,OAAC+F,EAAQI,EAASnG,GAAS0B,GAAYA,EAAS1B,EAAhD,GACjB0C,EAAI,CACRP,IAAKA,IAEJnB,GAIT,IAGFK,EAAW+C,WAASP,EAAAA,EAAAA,IAAA,CAClB5C,UAAWoD,IAAAA,OACX9C,GAAI8C,IAAAA,OACJ0B,MAAO1B,IAAAA,UAAoB,CAACA,IAAAA,KAAgBA,IAAAA,SAC5C2B,UAAW3B,IAAAA,KACX4B,KAAM5B,IAAAA,MAAgB,CAAC,KAAM,OAC7B/C,KAAM+C,IAAAA,UAAoB,CAACA,IAAAA,MAAgB,CAAC,QAAS,OAAQ,SAAUA,IAAAA,UACpEmB,EAAAA,EAAoBpB,WAGzB/C,EAAWmD,YAAc,Y,4FC7HZrD,GAAac,EAAAA,EAAAA,aACxB,SAACC,EAAmDC,GAAjD,IAAAnB,EAAQkB,EAAAlB,SAAEC,EAASiB,EAAAjB,UAAEsF,EAAerE,EAAAqE,gBAAK7D,GAA3CC,EAAAA,EAAAA,IAAAT,EAAA,4CACC,OACEkB,EAAAA,cAAO,SAAAS,EAAAA,EAAAA,IAAA,CAAA5C,UAAW,OAAAsF,QAAA,IAAAA,EAAAA,GAAmBzC,EAAAA,EAAAA,GAAW,aAAc7C,IAAgByB,EAAM,CAAAP,IAAKA,IACtFnB,EAGP,IAGFG,EAAWiD,UAAY,CACrBpD,SAAUqD,IAAAA,KACVpD,UAAWoD,IAAAA,OACXkC,gBAAiBlC,IAAAA,QAGnBlD,EAAWqD,YAAc,Y","sources":["views/pages/fieldvalidation/FieldValidation.js","../node_modules/@coreui/react/src/components/alert/CAlert.tsx","../node_modules/@coreui/react/src/components/form/CForm.tsx","../node_modules/@coreui/react/src/components/form/CFormControlValidation.tsx","../node_modules/@coreui/react/src/components/form/CFormText.tsx","../node_modules/@coreui/react/src/components/form/CFormControlWrapper.tsx","../node_modules/@coreui/react/src/components/form/CFormFeedback.tsx","../node_modules/@coreui/react/src/components/form/CFormFloating.tsx","../node_modules/@coreui/react/src/components/form/CFormInput.tsx","../node_modules/@coreui/react/src/components/form/CFormLabel.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { CForm, CFormInput, CButton, CFormLabel, CAlert } from '@coreui/react';\n\nfunction FieldValidation() {\n  const [formData, setFormData] = useState({\n    host: '192.168.0.1', // Pre-initialized state for host\n  });\n  const [errors, setErrors] = useState({});\n\n  const handleChange = (event) => {\n    setFormData({ ...formData, [event.target.name]: event.target.value });\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    console.log(\"trying to submit..\");\n    try {\n      const response = await axios({\n        method: 'post',\n        url: 'http://127.0.0.1:8000/input_valid/host/',\n        data: new URLSearchParams({ user_input: formData.host }),\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n      });\n\n      if (response.status === 200 && !response.data.includes(\"error\")) {\n        alert('Form is valid!');\n        console.log(response.data); // Log success message\n        setErrors({}); // Clear errors on success\n      } else {\n        console.log(response.data); // Log error message\n        setErrors({ host: response.data || \"An error occurred\" });\n      }\n    } catch (error) {\n      console.error('Error posting data:', error);\n      setErrors({ host: 'Network or server error' }); // Set a generic error if an unexpected error occurs\n    }\n  };\n\n  return (\n    <CForm onSubmit={handleSubmit}>\n      <div className=\"mb-3\">\n        <CFormLabel htmlFor=\"host\">Host:</CFormLabel>\n        <CFormInput type=\"text\" id=\"host\" name=\"host\" value={formData.host} onChange={handleChange} isInvalid={Boolean(errors.host)} />\n        {errors.host && <CAlert color=\"danger\">{errors.host}</CAlert>}\n      </div>\n      <CButton type=\"submit\" color=\"primary\">Submit</CButton>\n    </CForm>\n  );\n}\n\nexport default FieldValidation;\n","import React, { forwardRef, HTMLAttributes, useEffect, useState, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\n\nimport { CCloseButton } from '../close-button/CCloseButton'\n\nimport { useForkedRef } from '../../hooks'\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CAlertProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color: Colors\n  /**\n   * Optionally add a close button to alert and allow it to self dismiss.\n   */\n  dismissible?: boolean\n  /**\n   * Callback fired when the component requests to be closed.\n   */\n  onClose?: () => void\n  /**\n   * Set the alert variant to a solid.\n   */\n  variant?: 'solid' | string\n  /**\n   * Toggle the visibility of component.\n   */\n  visible?: boolean\n}\n\nexport const CAlert = forwardRef<HTMLDivElement, CAlertProps>(\n  (\n    {\n      children,\n      className,\n      color = 'primary',\n      dismissible,\n      variant,\n      visible = true,\n      onClose,\n      ...rest\n    },\n    ref,\n  ) => {\n    const alertRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, alertRef)\n    const [_visible, setVisible] = useState(visible)\n\n    useEffect(() => {\n      setVisible(visible)\n    }, [visible])\n\n    return (\n      <Transition\n        in={_visible}\n        mountOnEnter\n        nodeRef={alertRef}\n        onExit={onClose}\n        timeout={150}\n        unmountOnExit\n      >\n        {(state) => (\n          <div\n            className={classNames(\n              'alert',\n              variant === 'solid' ? `bg-${color} text-white` : `alert-${color}`,\n              {\n                'alert-dismissible fade': dismissible,\n                show: state === 'entered',\n              },\n              className,\n            )}\n            role=\"alert\"\n            {...rest}\n            ref={forkedRef}\n          >\n            {children}\n            {dismissible && <CCloseButton onClick={() => setVisible(false)} />}\n          </div>\n        )}\n      </Transition>\n    )\n  },\n)\n\nCAlert.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType.isRequired,\n  dismissible: PropTypes.bool,\n  onClose: PropTypes.func,\n  variant: PropTypes.string,\n  visible: PropTypes.bool,\n}\n\nCAlert.displayName = 'CAlert'\n","import React, { forwardRef, FormHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormProps extends FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Mark a form as validated. If you set it `true`, all validation styles will be applied to the forms component.\n   */\n  validated?: boolean\n}\n\nexport const CForm = forwardRef<HTMLFormElement, CFormProps>(\n  ({ children, className, validated, ...rest }, ref) => {\n    return (\n      <form\n        className={classNames({ 'was-validated': validated }, className) || undefined}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </form>\n    )\n  },\n)\n\nCForm.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  validated: PropTypes.bool,\n}\n\nCForm.displayName = 'CForm'\n","import React, { FC, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CFormFeedback } from './CFormFeedback'\n\nexport interface CFormControlValidationProps {\n  /**\n   * @ignore\n   */\n  describedby?: string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedback?: ReactNode | string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedbackInvalid?: ReactNode | string\n  /**\n   * Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  feedbackValid?: ReactNode | string\n  /**\n   * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  floatingLabel?: ReactNode | string\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * Display validation feedback in a styled tooltip.\n   *\n   * @since 4.2.0\n   */\n  tooltipFeedback?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormControlValidation: FC<CFormControlValidationProps> = ({\n  describedby,\n  feedback,\n  feedbackInvalid,\n  feedbackValid,\n  invalid,\n  tooltipFeedback,\n  valid,\n}) => {\n  return (\n    <>\n      {feedback && (valid || invalid) && (\n        <CFormFeedback\n          {...(invalid && { id: describedby })}\n          invalid={invalid}\n          tooltip={tooltipFeedback}\n          valid={valid}\n        >\n          {feedback}\n        </CFormFeedback>\n      )}\n      {feedbackInvalid && (\n        <CFormFeedback id={describedby} invalid tooltip={tooltipFeedback}>\n          {feedbackInvalid}\n        </CFormFeedback>\n      )}\n      {feedbackValid && (\n        <CFormFeedback valid tooltip={tooltipFeedback}>\n          {feedbackValid}\n        </CFormFeedback>\n      )}\n    </>\n  )\n}\n\nCFormControlValidation.propTypes = {\n  describedby: PropTypes.string,\n  feedback: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackValid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackInvalid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  invalid: PropTypes.bool,\n  tooltipFeedback: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormControlValidation.displayName = 'CFormControlValidation'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CFormTextProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CFormText: PolymorphicRefForwardingComponent<'div', CFormTextProps> = forwardRef<\n  HTMLDivElement | HTMLSpanElement,\n  CFormTextProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('form-text', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCFormText.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCFormText.displayName = 'CFormText'\n","import React, { FC, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormFloating } from './CFormFloating'\nimport { CFormLabel } from './CFormLabel'\nimport { CFormText } from './CFormText'\n\nexport interface CFormControlWrapperProps extends CFormControlValidationProps {\n  /**\n   * @ignore\n   */\n  children?: ReactNode\n  /**\n   * A string of all className you want applied to the floating label wrapper.\n   *\n   * @since 4.5.0\n   */\n  floatingClassName?: string\n  /**\n   * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  floatingLabel?: ReactNode | string\n  /**\n   * @ignore\n   */\n  id?: string\n  /**\n   * Add a caption for a component.\n   *\n   * @since 4.2.0\n   */\n  label?: ReactNode | string\n  /**\n   * Add helper text to the component.\n   *\n   * @since 4.2.0\n   */\n  text?: ReactNode | string\n}\n\nexport const CFormControlWrapper: FC<CFormControlWrapperProps> = ({\n  children,\n  describedby,\n  feedback,\n  feedbackInvalid,\n  feedbackValid,\n  floatingClassName,\n  floatingLabel,\n  id,\n  invalid,\n  label,\n  text,\n  tooltipFeedback,\n  valid,\n}) => {\n  const FormControlValidation = () => (\n    <CFormControlValidation\n      describedby={describedby}\n      feedback={feedback}\n      feedbackInvalid={feedbackInvalid}\n      feedbackValid={feedbackValid}\n      floatingLabel={floatingLabel}\n      invalid={invalid}\n      tooltipFeedback={tooltipFeedback}\n      valid={valid}\n    />\n  )\n  return floatingLabel ? (\n    <CFormFloating className={floatingClassName}>\n      {children}\n      <CFormLabel htmlFor={id}>{label || floatingLabel}</CFormLabel>\n      {text && <CFormText id={describedby}>{text}</CFormText>}\n      <FormControlValidation />\n    </CFormFloating>\n  ) : (\n    <>\n      {label && <CFormLabel htmlFor={id}>{label}</CFormLabel>}\n      {children}\n      {text && <CFormText id={describedby}>{text}</CFormText>}\n      <FormControlValidation />\n    </>\n  )\n}\n\nCFormControlWrapper.propTypes = {\n  children: PropTypes.node,\n  floatingClassName: PropTypes.string,\n  floatingLabel: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  label: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  text: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormControlWrapper.displayName = 'CFormControlWrapper'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CFormFeedbackProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  invalid?: boolean\n  /**\n   * If your form layout allows it, you can display validation feedback in a styled tooltip.\n   */\n  tooltip?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormFeedback: PolymorphicRefForwardingComponent<'div', CFormFeedbackProps> =\n  forwardRef<HTMLDivElement | HTMLSpanElement, CFormFeedbackProps>(\n    ({ children, as: Component = 'div', className, invalid, tooltip, valid, ...rest }, ref) => {\n      return (\n        <Component\n          className={classNames(\n            {\n              [`invalid-${tooltip ? 'tooltip' : 'feedback'}`]: invalid,\n              [`valid-${tooltip ? 'tooltip' : 'feedback'}`]: valid,\n            },\n            className,\n          )}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </Component>\n      )\n    },\n  )\n\nCFormFeedback.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  invalid: PropTypes.bool,\n  tooltip: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormFeedback.displayName = 'CFormFeedback'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormFloatingProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CFormFloating = forwardRef<HTMLDivElement, CFormFloatingProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('form-floating', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCFormFloating.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCFormFloating.displayName = 'CFormFloating'\n","import React, {\n  ChangeEventHandler,\n  forwardRef,\n  InputHTMLAttributes,\n  useEffect,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\nexport interface CFormInputProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Delay onChange event while typing. If set to true onChange event will be delayed 500ms, you can also provide the number of milliseconds you want to delay the onChange event.\n   */\n  delay?: boolean | number\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLInputElement>\n  /**\n   * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n   */\n  plainText?: boolean\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'color' | 'file' | 'text' | string\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormInput = forwardRef<HTMLInputElement, CFormInputProps>(\n  (\n    {\n      children,\n      className,\n      delay = false,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      id,\n      invalid,\n      label,\n      onChange,\n      plainText,\n      size,\n      text,\n      tooltipFeedback,\n      type = 'text',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const [value, setValue] = useState<React.ChangeEvent<HTMLInputElement>>()\n\n    useEffect(() => {\n      const timeOutId = setTimeout(\n        () => value && onChange && onChange(value),\n        typeof delay === 'number' ? delay : 500,\n      )\n\n      return () => clearTimeout(timeOutId)\n    }, [value])\n\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <input\n          className={classNames(\n            plainText ? 'form-control-plaintext' : 'form-control',\n            {\n              [`form-control-${size}`]: size,\n              'form-control-color': type === 'color',\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          id={id}\n          type={type}\n          onChange={(event) => (delay ? setValue(event) : onChange && onChange(event))}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </input>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormInput.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  delay: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  plainText: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg']),\n  type: PropTypes.oneOfType([PropTypes.oneOf(['color', 'file', 'text']), PropTypes.string]),\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormInput.displayName = 'CFormInput'\n","import React, { forwardRef, LabelHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormLabelProps extends LabelHTMLAttributes<HTMLLabelElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * A string of all className you want to be applied to the component, and override standard className value.\n   */\n  customClassName?: string\n}\n\nexport const CFormLabel = forwardRef<HTMLLabelElement, CFormLabelProps>(\n  ({ children, className, customClassName, ...rest }, ref) => {\n    return (\n      <label className={customClassName ?? classNames('form-label', className)} {...rest} ref={ref}>\n        {children}\n      </label>\n    )\n  },\n)\n\nCFormLabel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  customClassName: PropTypes.string,\n}\n\nCFormLabel.displayName = 'CFormLabel'\n"],"names":["formData","setFormData","useState","host","errors","setErrors","_jsxs","CForm","onSubmit","async","event","preventDefault","console","log","response","axios","method","url","data","URLSearchParams","user_input","headers","status","includes","alert","error","children","className","_jsx","CFormLabel","htmlFor","CFormInput","type","id","name","value","onChange","target","isInvalid","Boolean","CAlert","color","CButton","forwardRef","_a","ref","_b","dismissible","variant","_c","visible","onClose","rest","__rest","alertRef","useRef","forkedRef","useForkedRef","_d","_visible","setVisible","useEffect","React","Transition","in","mountOnEnter","nodeRef","onExit","timeout","unmountOnExit","state","__assign","classNames","concat","show","role","CCloseButton","onClick","propTypes","PropTypes","colorPropType","isRequired","displayName","validated","undefined","CFormControlValidation","describedby","feedback","feedbackInvalid","feedbackValid","invalid","tooltipFeedback","valid","CFormFeedback","tooltip","CFormText","as","Component","CFormControlWrapper","floatingClassName","floatingLabel","label","text","FormControlValidation","CFormFloating","delay","plainText","size","_e","setValue","timeOutId","setTimeout","clearTimeout","customClassName"],"sourceRoot":""}