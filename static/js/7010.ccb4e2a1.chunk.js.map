{"version":3,"file":"static/js/7010.ccb4e2a1.chunk.js","mappings":"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","sources":["../node_modules/@coreui/react/src/components/alert/CAlertLink.tsx","../node_modules/@coreui/react/src/components/alert/CAlertHeading.tsx","views/notifications/alerts/Alerts.js","../node_modules/@coreui/react/src/components/alert/CAlert.tsx","../node_modules/@coreui/react/src/components/card/CCard.tsx","../node_modules/@coreui/react/src/components/card/CCardBody.tsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/grid/CCol.tsx","../node_modules/@coreui/react/src/components/grid/CRow.tsx"],"sourcesContent":["import React, { AnchorHTMLAttributes, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CLink } from '../link/CLink'\n\nexport interface CAlertLinkProps extends AnchorHTMLAttributes<HTMLAnchorElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CAlertLink = forwardRef<HTMLAnchorElement, CAlertLinkProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <CLink className={classNames('alert-link', className)} {...rest} ref={ref}>\n        {children}\n      </CLink>\n    )\n  },\n)\n\nCAlertLink.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCAlertLink.displayName = 'CAlertLink'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CAlertHeadingProps extends HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CAlertHeading: PolymorphicRefForwardingComponent<'h4', CAlertHeadingProps> =\n  forwardRef<HTMLHeadingElement, CAlertHeadingProps>(\n    ({ children, as: Component = 'h4', className, ...rest }, ref) => {\n      return (\n        <Component className={classNames('alert-heading', className)} {...rest} ref={ref}>\n          {children}\n        </Component>\n      )\n    },\n  )\n\nCAlertHeading.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCAlertHeading.displayName = 'CAlertHeading'\n","import React from 'react'\nimport {\n  CAlert,\n  CAlertHeading,\n  CAlertLink,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n} from '@coreui/react'\nimport { DocsExample } from '../../../components'\n\nconst Alerts = () => {\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Alert</strong>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              React Alert is prepared for any length of text, as well as an optional close button.\n              For a styling, use one of the <strong>required</strong> contextual <code>color</code>{' '}\n              props (e.g., <code>primary</code>). For inline dismissal, use the{' '}\n              <a href=\"https://coreui.io/react/docs/components/alert#dismissing\">dismissing prop</a>\n              .\n            </p>\n            <DocsExample href=\"components/alert\">\n              <CAlert color=\"primary\">A simple primary alert—check it out!</CAlert>\n              <CAlert color=\"secondary\">A simple secondary alert—check it out!</CAlert>\n              <CAlert color=\"success\">A simple success alert—check it out!</CAlert>\n              <CAlert color=\"danger\">A simple danger alert—check it out!</CAlert>\n              <CAlert color=\"warning\">A simple warning alert—check it out!</CAlert>\n              <CAlert color=\"info\">A simple info alert—check it out!</CAlert>\n              <CAlert color=\"light\">A simple light alert—check it out!</CAlert>\n              <CAlert color=\"dark\">A simple dark alert—check it out!</CAlert>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Alert</strong> <small>Link color</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Use the <code>&lt;CAlertLink&gt;</code> component to immediately give matching colored\n              links inside any alert.\n            </p>\n            <DocsExample href=\"components/alert#link-color\">\n              <CAlert color=\"primary\">\n                A simple primary alert with <CAlertLink href=\"#\">an example link</CAlertLink>. Give\n                it a click if you like.\n              </CAlert>\n              <CAlert color=\"secondary\">\n                A simple secondary alert with <CAlertLink href=\"#\">an example link</CAlertLink>.\n                Give it a click if you like.\n              </CAlert>\n              <CAlert color=\"success\">\n                A simple success alert with <CAlertLink href=\"#\">an example link</CAlertLink>. Give\n                it a click if you like.\n              </CAlert>\n              <CAlert color=\"danger\">\n                A simple danger alert with <CAlertLink href=\"#\">an example link</CAlertLink>. Give\n                it a click if you like.\n              </CAlert>\n              <CAlert color=\"warning\">\n                A simple warning alert with <CAlertLink href=\"#\">an example link</CAlertLink>. Give\n                it a click if you like.\n              </CAlert>\n              <CAlert color=\"info\">\n                A simple info alert with <CAlertLink href=\"#\">an example link</CAlertLink>. Give it\n                a click if you like.\n              </CAlert>\n              <CAlert color=\"light\">\n                A simple light alert with <CAlertLink href=\"#\">an example link</CAlertLink>. Give it\n                a click if you like.\n              </CAlert>\n              <CAlert color=\"dark\">\n                A simple dark alert with <CAlertLink href=\"#\">an example link</CAlertLink>. Give it\n                a click if you like.\n              </CAlert>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Alert</strong> <small>Additional content</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Alert can also incorporate supplementary components &amp; elements like heading,\n              paragraph, and divider.\n            </p>\n            <DocsExample href=\"components/alert#additional-content\">\n              <CAlert color=\"success\">\n                <CAlertHeading as=\"h4\">Well done!</CAlertHeading>\n                <p>\n                  Aww yeah, you successfully read this important alert message. This example text is\n                  going to run a bit longer so that you can see how spacing within an alert works\n                  with this kind of content.\n                </p>\n                <hr />\n                <p className=\"mb-0\">\n                  Whenever you need to, be sure to use margin utilities to keep things nice and\n                  tidy.\n                </p>\n              </CAlert>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Alert</strong> <small>Dismissing</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Alerts can also be easily dismissed. Just add the <code>dismissible</code> prop.\n            </p>\n            <DocsExample href=\"components/alert#dismissing\">\n              <CAlert\n                color=\"warning\"\n                dismissible\n                onClose={() => {\n                  alert('👋 Well, hi there! Thanks for dismissing me.')\n                }}\n              >\n                <strong>Go right ahead</strong> and click that dimiss over there on the right.\n              </CAlert>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Alerts\n","import React, { forwardRef, HTMLAttributes, useEffect, useState, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\n\nimport { CCloseButton } from '../close-button/CCloseButton'\n\nimport { useForkedRef } from '../../hooks'\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CAlertProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color: Colors\n  /**\n   * Optionally add a close button to alert and allow it to self dismiss.\n   */\n  dismissible?: boolean\n  /**\n   * Callback fired when the component requests to be closed.\n   */\n  onClose?: () => void\n  /**\n   * Set the alert variant to a solid.\n   */\n  variant?: 'solid' | string\n  /**\n   * Toggle the visibility of component.\n   */\n  visible?: boolean\n}\n\nexport const CAlert = forwardRef<HTMLDivElement, CAlertProps>(\n  (\n    {\n      children,\n      className,\n      color = 'primary',\n      dismissible,\n      variant,\n      visible = true,\n      onClose,\n      ...rest\n    },\n    ref,\n  ) => {\n    const alertRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, alertRef)\n    const [_visible, setVisible] = useState(visible)\n\n    useEffect(() => {\n      setVisible(visible)\n    }, [visible])\n\n    return (\n      <Transition\n        in={_visible}\n        mountOnEnter\n        nodeRef={alertRef}\n        onExit={onClose}\n        timeout={150}\n        unmountOnExit\n      >\n        {(state) => (\n          <div\n            className={classNames(\n              'alert',\n              variant === 'solid' ? `bg-${color} text-white` : `alert-${color}`,\n              {\n                'alert-dismissible fade': dismissible,\n                show: state === 'entered',\n              },\n              className,\n            )}\n            role=\"alert\"\n            {...rest}\n            ref={forkedRef}\n          >\n            {children}\n            {dismissible && <CCloseButton onClick={() => setVisible(false)} />}\n          </div>\n        )}\n      </Transition>\n    )\n  },\n)\n\nCAlert.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType.isRequired,\n  dismissible: PropTypes.bool,\n  onClose: PropTypes.func,\n  variant: PropTypes.string,\n  visible: PropTypes.bool,\n}\n\nCAlert.displayName = 'CAlert'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n  /**\n   * Sets the component's color scheme to one of CoreUI's themed colors, ensuring the text color contrast adheres to the WCAG 4.5:1 contrast ratio standard for accessibility.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   * @since 5.0.0-rc.3\n   */\n  textBgColor?: Colors\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textBgColor, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n            [`text-bg-${textBgColor}`]: textBgColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textBgColor: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\ntype Span = 'auto' | number | string | boolean | null\n\ntype BPObject = {\n  span?: Span\n  offset?: number | string | null\n  order?: 'first' | 'last' | number | string | null\n}\n\ntype Col = Span | BPObject\n\nexport interface CColProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xs?: Col\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  sm?: Col\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  md?: Col\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  lg?: Col\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xl?: Col\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xxl?: Col\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CCol = forwardRef<HTMLDivElement, CColProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n        repsonsiveClassNames.push(`col${infix}-${breakpoint}`)\n      }\n\n      if (typeof breakpoint === 'boolean') {\n        repsonsiveClassNames.push(`col${infix}`)\n      }\n\n      if (breakpoint && typeof breakpoint === 'object') {\n        if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n          repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`)\n        }\n\n        if (typeof breakpoint.span === 'boolean') {\n          repsonsiveClassNames.push(`col${infix}`)\n        }\n\n        if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n          repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`)\n        }\n\n        if (typeof breakpoint.offset === 'number') {\n          repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`)\n        }\n      }\n    })\n\n    return (\n      <div\n        className={classNames(\n          repsonsiveClassNames.length > 0 ? repsonsiveClassNames : 'col',\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nconst span = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.oneOf(['auto']),\n])\n\nconst col = PropTypes.oneOfType([\n  span,\n  PropTypes.shape({\n    span: span,\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    order: PropTypes.oneOfType([\n      PropTypes.oneOf(['first', 'last']),\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  }),\n])\n\nCCol.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: col,\n  sm: col,\n  md: col,\n  lg: col,\n  xl: col,\n  xxl: col,\n}\n\nCCol.displayName = 'CCol'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport type BPObject = {\n  cols?: 'auto' | number | string | null\n  gutter?: number | string | null\n  gutterX?: number | string | null\n  gutterY?: number | string | null\n}\n\nexport interface CRowProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xs?: BPObject\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  sm?: BPObject\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  md?: BPObject\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  lg?: BPObject\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xl?: BPObject\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xxl?: BPObject\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CRow = forwardRef<HTMLDivElement, CRowProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'object') {\n        if (breakpoint.cols) {\n          repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`)\n        }\n\n        if (typeof breakpoint.gutter === 'number') {\n          repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`)\n        }\n\n        if (typeof breakpoint.gutterX === 'number') {\n          repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`)\n        }\n\n        if (typeof breakpoint.gutterY === 'number') {\n          repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`)\n        }\n      }\n    })\n\n    return (\n      <div className={classNames('row', repsonsiveClassNames, className)} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nconst bp = PropTypes.shape({\n  cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n})\n\nCRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: bp,\n  sm: bp,\n  md: bp,\n  lg: bp,\n  xl: bp,\n  xxl: bp,\n}\n\nCRow.displayName = 'CRow'\n"],"names":["CAlertLink","forwardRef","_a","ref","children","className","rest","__rest","React","CLink","__assign","classNames","propTypes","PropTypes","displayName","CAlertHeading","_b","as","Component","Alerts","_jsxs","CRow","_jsx","CCol","xs","CCard","CCardHeader","CCardBody","href","DocsExample","CAlert","color","dismissible","onClose","alert","variant","_c","visible","alertRef","useRef","forkedRef","useForkedRef","_d","useState","_visible","setVisible","useEffect","Transition","in","mountOnEnter","nodeRef","onExit","timeout","unmountOnExit","state","concat","show","role","CCloseButton","onClick","colorPropType","isRequired","textBgColor","textColor","BREAKPOINTS","repsonsiveClassNames","forEach","bp","breakpoint","infix","push","span","order","offset","length","col","sm","md","lg","xl","xxl","cols","gutter","gutterX","gutterY"],"sourceRoot":""}