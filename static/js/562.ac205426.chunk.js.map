{"version":3,"file":"static/js/562.ac205426.chunk.js","mappings":"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","sources":["../node_modules/@coreui/react/src/components/accordion/CAccordion.tsx","../node_modules/@coreui/react/src/components/accordion/CAccordionItem.tsx","../node_modules/@coreui/react/src/components/accordion/CAccordionButton.tsx","../node_modules/@coreui/react/src/components/accordion/CAccordionHeader.tsx","../node_modules/@coreui/react/src/components/accordion/CAccordionBody.tsx","views/base/accordion/Accordion.js"],"sourcesContent":["import React, { createContext, forwardRef, HTMLAttributes, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CAccordionProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * The active item key.\n   */\n  activeItemKey?: number | string\n  /**\n   * Make accordion items stay open when another item is opened\n   */\n  alwaysOpen?: boolean\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Removes the default background-color, some borders, and some rounded corners to render accordions edge-to-edge with their parent container.\n   */\n  flush?: boolean\n}\n\nexport interface CAccordionContextProps {\n  _activeItemKey?: number | string\n  alwaysOpen?: boolean\n  setActiveKey: React.Dispatch<React.SetStateAction<number | string | undefined>>\n}\n\nexport const CAccordionContext = createContext({} as CAccordionContextProps)\n\nexport const CAccordion = forwardRef<HTMLDivElement, CAccordionProps>(\n  ({ children, activeItemKey, alwaysOpen = false, className, flush, ...rest }, ref) => {\n    const [_activeItemKey, setActiveKey] = useState(activeItemKey)\n\n    return (\n      <div\n        className={classNames('accordion', { 'accordion-flush': flush }, className)}\n        {...rest}\n        ref={ref}\n      >\n        <CAccordionContext.Provider value={{ _activeItemKey, alwaysOpen, setActiveKey }}>\n          {children}\n        </CAccordionContext.Provider>\n      </div>\n    )\n  },\n)\n\nCAccordion.propTypes = {\n  alwaysOpen: PropTypes.bool,\n  activeItemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  flush: PropTypes.bool,\n}\n\nCAccordion.displayName = 'CAccordion'\n","import React, {\n  createContext,\n  forwardRef,\n  HTMLAttributes,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CAccordionContext } from './CAccordion'\n\nexport interface CAccordionItemContextProps {\n  setVisible: (a: boolean) => void\n  visible?: boolean\n}\n\nexport const CAccordionItemContext = createContext({} as CAccordionItemContextProps)\n\nexport interface CAccordionItemProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Item key.\n   */\n  itemKey?: number | string\n}\n\nexport const CAccordionItem = forwardRef<HTMLDivElement, CAccordionItemProps>(\n  ({ children, className, itemKey, ...rest }, ref) => {\n    const _itemKey = useRef(itemKey ?? Math.random().toString(36).slice(2, 11))\n\n    const { _activeItemKey, alwaysOpen, setActiveKey } = useContext(CAccordionContext)\n    const [visible, setVisible] = useState(Boolean(_activeItemKey === _itemKey.current))\n\n    useEffect(() => {\n      !alwaysOpen && visible && setActiveKey(_itemKey.current)\n    }, [visible])\n\n    useEffect(() => {\n      setVisible(Boolean(_activeItemKey === _itemKey.current))\n    }, [_activeItemKey])\n\n    return (\n      <div className={classNames('accordion-item', className)} {...rest} ref={ref}>\n        <CAccordionItemContext.Provider value={{ setVisible, visible }}>\n          {children}\n        </CAccordionItemContext.Provider>\n      </div>\n    )\n  },\n)\n\nCAccordionItem.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  itemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n}\n\nCAccordionItem.displayName = 'CAccordionItem'\n","import React, { forwardRef, HTMLAttributes, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CAccordionItemContext } from './CAccordionItem'\n\nexport interface CAccordionButtonProps extends HTMLAttributes<HTMLButtonElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CAccordionButton = forwardRef<HTMLButtonElement, CAccordionButtonProps>(\n  ({ children, className, ...rest }, ref) => {\n    const { visible, setVisible } = useContext(CAccordionItemContext)\n\n    return (\n      <button\n        type=\"button\"\n        className={classNames('accordion-button', { collapsed: !visible }, className)}\n        aria-expanded={!visible}\n        onClick={() => setVisible(!visible)}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </button>\n    )\n  },\n)\n\nCAccordionButton.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCAccordionButton.displayName = 'CAccordionButton'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CAccordionButton } from './CAccordionButton'\n\nexport interface CAccordionHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CAccordionHeader = forwardRef<HTMLDivElement, CAccordionHeaderProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('accordion-header', className)} {...rest} ref={ref}>\n        <CAccordionButton>{children}</CAccordionButton>\n      </div>\n    )\n  },\n)\n\nCAccordionHeader.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCAccordionHeader.displayName = 'CAccordionHeader'\n","import React, { forwardRef, HTMLAttributes, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CAccordionItemContext } from './CAccordionItem'\n\nimport { CCollapse } from './../collapse/CCollapse'\n\nexport interface CAccordionBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CAccordionBody = forwardRef<HTMLDivElement, CAccordionBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    const { visible } = useContext(CAccordionItemContext)\n\n    return (\n      <CCollapse className=\"accordion-collapse\" visible={visible}>\n        <div className={classNames('accordion-body', className)} {...rest} ref={ref}>\n          {children}\n        </div>\n      </CCollapse>\n    )\n  },\n)\n\nCAccordionBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCAccordionBody.displayName = 'CAccordionBody'\n","import React from 'react'\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CAccordion,\n  CAccordionBody,\n  CAccordionHeader,\n  CAccordionItem,\n} from '@coreui/react'\nimport { DocsExample } from '../../../components'\n\nconst Accordion = () => {\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Accordion</strong>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Click the accordions below to expand/collapse the accordion content.\n            </p>\n            <DocsExample href=\"components/accordion\">\n              <CAccordion activeItemKey={2}>\n                <CAccordionItem itemKey={1}>\n                  <CAccordionHeader>Accordion Item #1</CAccordionHeader>\n                  <CAccordionBody>\n                    <strong>This is the first item&#39;s accordion body.</strong> It is hidden by\n                    default, until the collapse plugin adds the appropriate classes that we use to\n                    style each element. These classes control the overall appearance, as well as the\n                    showing and hiding via CSS transitions. You can modify any of this with custom\n                    CSS or overriding our default variables. It&#39;s also worth noting that just\n                    about any HTML can go within the <code>.accordion-body</code>, though the\n                    transition does limit overflow.\n                  </CAccordionBody>\n                </CAccordionItem>\n                <CAccordionItem itemKey={2}>\n                  <CAccordionHeader>Accordion Item #2</CAccordionHeader>\n                  <CAccordionBody>\n                    <strong>This is the second item&#39;s accordion body.</strong> It is hidden by\n                    default, until the collapse plugin adds the appropriate classes that we use to\n                    style each element. These classes control the overall appearance, as well as the\n                    showing and hiding via CSS transitions. You can modify any of this with custom\n                    CSS or overriding our default variables. It&#39;s also worth noting that just\n                    about any HTML can go within the <code>.accordion-body</code>, though the\n                    transition does limit overflow.\n                  </CAccordionBody>\n                </CAccordionItem>\n                <CAccordionItem itemKey={3}>\n                  <CAccordionHeader>Accordion Item #3</CAccordionHeader>\n                  <CAccordionBody>\n                    <strong>This is the second item&#39;s accordion body.</strong> It is hidden by\n                    default, until the collapse plugin adds the appropriate classes that we use to\n                    style each element. These classes control the overall appearance, as well as the\n                    showing and hiding via CSS transitions. You can modify any of this with custom\n                    CSS or overriding our default variables. It&#39;s also worth noting that just\n                    about any HTML can go within the <code>.accordion-body</code>, though the\n                    transition does limit overflow.\n                  </CAccordionBody>\n                </CAccordionItem>\n              </CAccordion>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Accordion</strong> <small>Flush</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Add <code>flush</code> to remove the default <code>background-color</code>, some\n              borders, and some rounded corners to render accordions edge-to-edge with their parent\n              container.\n            </p>\n            <DocsExample href=\"components/accordion#flush\">\n              <CAccordion flush>\n                <CAccordionItem itemKey={1}>\n                  <CAccordionHeader>Accordion Item #1</CAccordionHeader>\n                  <CAccordionBody>\n                    <strong>This is the first item&#39;s accordion body.</strong> It is hidden by\n                    default, until the collapse plugin adds the appropriate classes that we use to\n                    style each element. These classes control the overall appearance, as well as the\n                    showing and hiding via CSS transitions. You can modify any of this with custom\n                    CSS or overriding our default variables. It&#39;s also worth noting that just\n                    about any HTML can go within the <code>.accordion-body</code>, though the\n                    transition does limit overflow.\n                  </CAccordionBody>\n                </CAccordionItem>\n                <CAccordionItem itemKey={2}>\n                  <CAccordionHeader>Accordion Item #2</CAccordionHeader>\n                  <CAccordionBody>\n                    <strong>This is the second item&#39;s accordion body.</strong> It is hidden by\n                    default, until the collapse plugin adds the appropriate classes that we use to\n                    style each element. These classes control the overall appearance, as well as the\n                    showing and hiding via CSS transitions. You can modify any of this with custom\n                    CSS or overriding our default variables. It&#39;s also worth noting that just\n                    about any HTML can go within the <code>.accordion-body</code>, though the\n                    transition does limit overflow.\n                  </CAccordionBody>\n                </CAccordionItem>\n                <CAccordionItem itemKey={3}>\n                  <CAccordionHeader>Accordion Item #3</CAccordionHeader>\n                  <CAccordionBody>\n                    <strong>This is the second item&#39;s accordion body.</strong> It is hidden by\n                    default, until the collapse plugin adds the appropriate classes that we use to\n                    style each element. These classes control the overall appearance, as well as the\n                    showing and hiding via CSS transitions. You can modify any of this with custom\n                    CSS or overriding our default variables. It&#39;s also worth noting that just\n                    about any HTML can go within the <code>.accordion-body</code>, though the\n                    transition does limit overflow.\n                  </CAccordionBody>\n                </CAccordionItem>\n              </CAccordion>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Accordion</strong> <small>Always open</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Add <code>alwaysOpen</code> property to make accordion items stay open when another\n              item is opened.\n            </p>\n            <DocsExample href=\"components/accordion#flush\">\n              <CAccordion alwaysOpen>\n                <CAccordionItem itemKey={1}>\n                  <CAccordionHeader>Accordion Item #1</CAccordionHeader>\n                  <CAccordionBody>\n                    <strong>This is the first item&#39;s accordion body.</strong> It is hidden by\n                    default, until the collapse plugin adds the appropriate classes that we use to\n                    style each element. These classes control the overall appearance, as well as the\n                    showing and hiding via CSS transitions. You can modify any of this with custom\n                    CSS or overriding our default variables. It&#39;s also worth noting that just\n                    about any HTML can go within the <code>.accordion-body</code>, though the\n                    transition does limit overflow.\n                  </CAccordionBody>\n                </CAccordionItem>\n                <CAccordionItem itemKey={2}>\n                  <CAccordionHeader>Accordion Item #2</CAccordionHeader>\n                  <CAccordionBody>\n                    <strong>This is the second item&#39;s accordion body.</strong> It is hidden by\n                    default, until the collapse plugin adds the appropriate classes that we use to\n                    style each element. These classes control the overall appearance, as well as the\n                    showing and hiding via CSS transitions. You can modify any of this with custom\n                    CSS or overriding our default variables. It&#39;s also worth noting that just\n                    about any HTML can go within the <code>.accordion-body</code>, though the\n                    transition does limit overflow.\n                  </CAccordionBody>\n                </CAccordionItem>\n                <CAccordionItem itemKey={3}>\n                  <CAccordionHeader>Accordion Item #3</CAccordionHeader>\n                  <CAccordionBody>\n                    <strong>This is the second item&#39;s accordion body.</strong> It is hidden by\n                    default, until the collapse plugin adds the appropriate classes that we use to\n                    style each element. These classes control the overall appearance, as well as the\n                    showing and hiding via CSS transitions. You can modify any of this with custom\n                    CSS or overriding our default variables. It&#39;s also worth noting that just\n                    about any HTML can go within the <code>.accordion-body</code>, though the\n                    transition does limit overflow.\n                  </CAccordionBody>\n                </CAccordionItem>\n              </CAccordion>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Accordion\n"],"names":["CAccordionContext","createContext","CAccordion","forwardRef","_a","ref","children","activeItemKey","_b","alwaysOpen","className","flush","rest","__rest","_c","useState","_activeItemKey","setActiveKey","React","__assign","classNames","Provider","value","propTypes","PropTypes","displayName","CAccordionItemContext","CAccordionItem","itemKey","_itemKey","useRef","Math","random","toString","slice","useContext","Boolean","current","visible","setVisible","useEffect","CAccordionButton","type","collapsed","onClick","CAccordionHeader","CAccordionBody","CCollapse","Accordion","_jsx","CRow","_jsxs","CCol","xs","CCard","CCardHeader","CCardBody","DocsExample","href"],"sourceRoot":""}