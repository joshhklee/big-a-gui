{"version":3,"file":"static/js/850.caeea14a.chunk.js","mappings":"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","sources":["../node_modules/@coreui/react/src/components/form/CFormRange.tsx","views/forms/range/Range.js","../node_modules/@coreui/react/src/components/card/CCard.tsx","../node_modules/@coreui/react/src/components/card/CCardBody.tsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/form/CFormLabel.tsx","../node_modules/@coreui/react/src/components/grid/CCol.tsx","../node_modules/@coreui/react/src/components/grid/CRow.tsx"],"sourcesContent":["import React, { ChangeEventHandler, forwardRef, InputHTMLAttributes, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormLabel } from './CFormLabel'\nexport interface CFormRangeProps extends InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Add a caption for a component.\n   *\n   * @since 4.2.0\n   */\n  label?: ReactNode | string\n  /**\n   * Specifies the maximum value for the component.\n   */\n  max?: number\n  /**\n   * Specifies the minimum value for the component.\n   */\n  min?: number\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLInputElement>\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * Specifies the interval between legal numbers in the component.\n   */\n  step?: number\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormRange = forwardRef<HTMLInputElement, CFormRangeProps>(\n  ({ className, label, ...rest }, ref) => {\n    return (\n      <>\n        {label && <CFormLabel htmlFor={rest.id}>{label}</CFormLabel>}\n        <input type=\"range\" className={classNames('form-range', className)} {...rest} ref={ref} />\n      </>\n    )\n  },\n)\n\nCFormRange.propTypes = {\n  className: PropTypes.string,\n  label: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n}\n\nCFormRange.displayName = 'CFormRange'\n","import React from 'react'\nimport { CCard, CCardBody, CCardHeader, CCol, CFormLabel, CFormRange, CRow } from '@coreui/react'\nimport { DocsExample } from '../../../components'\n\nconst Range = () => {\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Range</strong> <small></small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Create custom <code>&lt;input type=&#34;range&#34;&gt;</code> controls with{' '}\n              <code>&lt;CFormRange&gt;</code>.\n            </p>\n            <DocsExample href=\"forms/range\" tabContentClassName=\"bg-opacity-10\">\n              <CFormLabel htmlFor=\"customRange1\">Example range</CFormLabel>\n              <CFormRange id=\"customRange1\" />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Range</strong> <small>Disabled</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Add the <code>disabled</code> boolean attribute on an input to give it a grayed out\n              appearance and remove pointer events.\n            </p>\n            <DocsExample href=\"forms/range#disabled\" tabContentClassName=\"bg-opacity-10\">\n              <CFormLabel htmlFor=\"disabledRange\">Disabled range</CFormLabel>\n              <CFormRange id=\"disabledRange\" disabled />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Range</strong> <small>Min and max</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Range inputs have implicit values for <code>min</code> and <code>max</code>—\n              <code>0</code> and <code>100</code>, respectively. You may specify new values for\n              those using the <code>min</code> and <code>max</code> attributes.\n            </p>\n            <DocsExample href=\"forms/range#min-and-max\" tabContentClassName=\"bg-opacity-10\">\n              <CFormLabel htmlFor=\"customRange2\">Example range</CFormLabel>\n              <CFormRange min={0} max={5} defaultValue=\"3\" id=\"customRange2\" />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Range</strong> <small>Steps</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              By default, range inputs &#34;snap&#34; to integer values. To change this, you can\n              specify a <code>step</code> value. In the example below, we double the number of steps\n              by using <code>step=&#34;0.5&#34;</code>.\n            </p>\n            <DocsExample href=\"forms/range#steps\" tabContentClassName=\"bg-opacity-10\">\n              <CFormLabel htmlFor=\"customRange3\">Example range</CFormLabel>\n              <CFormRange min={0} max={5} step={0.5} defaultValue=\"3\" id=\"customRange3\" />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Range\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n  /**\n   * Sets the component's color scheme to one of CoreUI's themed colors, ensuring the text color contrast adheres to the WCAG 4.5:1 contrast ratio standard for accessibility.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   * @since 5.0.0-rc.3\n   */\n  textBgColor?: Colors\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textBgColor, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n            [`text-bg-${textBgColor}`]: textBgColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textBgColor: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { forwardRef, LabelHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormLabelProps extends LabelHTMLAttributes<HTMLLabelElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * A string of all className you want to be applied to the component, and override standard className value.\n   */\n  customClassName?: string\n}\n\nexport const CFormLabel = forwardRef<HTMLLabelElement, CFormLabelProps>(\n  ({ children, className, customClassName, ...rest }, ref) => {\n    return (\n      <label className={customClassName ?? classNames('form-label', className)} {...rest} ref={ref}>\n        {children}\n      </label>\n    )\n  },\n)\n\nCFormLabel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  customClassName: PropTypes.string,\n}\n\nCFormLabel.displayName = 'CFormLabel'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\ntype Span = 'auto' | number | string | boolean | null\n\ntype BPObject = {\n  span?: Span\n  offset?: number | string | null\n  order?: 'first' | 'last' | number | string | null\n}\n\ntype Col = Span | BPObject\n\nexport interface CColProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xs?: Col\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  sm?: Col\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  md?: Col\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  lg?: Col\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xl?: Col\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xxl?: Col\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CCol = forwardRef<HTMLDivElement, CColProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n        repsonsiveClassNames.push(`col${infix}-${breakpoint}`)\n      }\n\n      if (typeof breakpoint === 'boolean') {\n        repsonsiveClassNames.push(`col${infix}`)\n      }\n\n      if (breakpoint && typeof breakpoint === 'object') {\n        if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n          repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`)\n        }\n\n        if (typeof breakpoint.span === 'boolean') {\n          repsonsiveClassNames.push(`col${infix}`)\n        }\n\n        if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n          repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`)\n        }\n\n        if (typeof breakpoint.offset === 'number') {\n          repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`)\n        }\n      }\n    })\n\n    return (\n      <div\n        className={classNames(\n          repsonsiveClassNames.length > 0 ? repsonsiveClassNames : 'col',\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nconst span = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.oneOf(['auto']),\n])\n\nconst col = PropTypes.oneOfType([\n  span,\n  PropTypes.shape({\n    span: span,\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    order: PropTypes.oneOfType([\n      PropTypes.oneOf(['first', 'last']),\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  }),\n])\n\nCCol.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: col,\n  sm: col,\n  md: col,\n  lg: col,\n  xl: col,\n  xxl: col,\n}\n\nCCol.displayName = 'CCol'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport type BPObject = {\n  cols?: 'auto' | number | string | null\n  gutter?: number | string | null\n  gutterX?: number | string | null\n  gutterY?: number | string | null\n}\n\nexport interface CRowProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xs?: BPObject\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  sm?: BPObject\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  md?: BPObject\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  lg?: BPObject\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xl?: BPObject\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xxl?: BPObject\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CRow = forwardRef<HTMLDivElement, CRowProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'object') {\n        if (breakpoint.cols) {\n          repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`)\n        }\n\n        if (typeof breakpoint.gutter === 'number') {\n          repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`)\n        }\n\n        if (typeof breakpoint.gutterX === 'number') {\n          repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`)\n        }\n\n        if (typeof breakpoint.gutterY === 'number') {\n          repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`)\n        }\n      }\n    })\n\n    return (\n      <div className={classNames('row', repsonsiveClassNames, className)} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nconst bp = PropTypes.shape({\n  cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n})\n\nCRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: bp,\n  sm: bp,\n  md: bp,\n  lg: bp,\n  xl: bp,\n  xxl: bp,\n}\n\nCRow.displayName = 'CRow'\n"],"names":["CFormRange","forwardRef","_a","ref","className","label","rest","__rest","React","CFormLabel","htmlFor","id","__assign","type","classNames","propTypes","PropTypes","displayName","Range","_jsxs","CRow","children","_jsx","CCol","xs","CCard","CCardHeader","CCardBody","DocsExample","href","tabContentClassName","disabled","min","max","defaultValue","step","color","textBgColor","textColor","_b","concat","colorPropType","as","Component","customClassName","BREAKPOINTS","repsonsiveClassNames","forEach","bp","breakpoint","infix","push","span","order","offset","length","col","sm","md","lg","xl","xxl","cols","gutter","gutterX","gutterY"],"sourceRoot":""}