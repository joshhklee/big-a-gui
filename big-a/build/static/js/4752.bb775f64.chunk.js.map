{"version":3,"file":"static/js/4752.bb775f64.chunk.js","mappings":"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","sources":["views/forms/layout/Layout.js","../node_modules/@coreui/react/src/components/card/CCard.tsx","../node_modules/@coreui/react/src/components/card/CCardBody.tsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/form/CForm.tsx","../node_modules/@coreui/react/src/components/form/CFormCheck.tsx","../node_modules/@coreui/react/src/components/form/CFormControlValidation.tsx","../node_modules/@coreui/react/src/components/form/CFormText.tsx","../node_modules/@coreui/react/src/components/form/CFormControlWrapper.tsx","../node_modules/@coreui/react/src/components/form/CFormFeedback.tsx","../node_modules/@coreui/react/src/components/form/CFormFloating.tsx","../node_modules/@coreui/react/src/components/form/CFormInput.tsx","../node_modules/@coreui/react/src/components/form/CFormLabel.tsx","../node_modules/@coreui/react/src/components/form/CFormSelect.tsx","../node_modules/@coreui/react/src/components/form/CInputGroup.tsx","../node_modules/@coreui/react/src/components/form/CInputGroupText.tsx","../node_modules/@coreui/react/src/components/grid/CCol.tsx","../node_modules/@coreui/react/src/components/grid/CRow.tsx"],"sourcesContent":["import React from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormCheck,\n  CFormInput,\n  CFormLabel,\n  CFormSelect,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n} from '@coreui/react'\nimport { DocsExample } from '../../../components'\n\nconst Layout = () => {\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Layout</strong> <small>Form grid</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              More complex forms can be built using our grid classes. Use these for form layouts\n              that require multiple columns, varied widths, and additional alignment options.\n            </p>\n            <DocsExample href=\"forms/layout#form-grid\">\n              <CRow>\n                <CCol xs>\n                  <CFormInput placeholder=\"First name\" aria-label=\"First name\" />\n                </CCol>\n                <CCol xs>\n                  <CFormInput placeholder=\"Last name\" aria-label=\"Last name\" />\n                </CCol>\n              </CRow>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Layout</strong> <small>Gutters</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              By adding <a href=\"https://coreui.io/docs/layout/gutters/\">gutter modifier classes</a>\n              , you can have control over the gutter width in as well the inline as block direction.\n            </p>\n            <DocsExample href=\"forms/layout#gutters\">\n              <CRow className=\"g-3\">\n                <CCol xs>\n                  <CFormInput placeholder=\"First name\" aria-label=\"First name\" />\n                </CCol>\n                <CCol xs>\n                  <CFormInput placeholder=\"Last name\" aria-label=\"Last name\" />\n                </CCol>\n              </CRow>\n            </DocsExample>\n            <p className=\"text-body-secondary small\">\n              More complex layouts can also be created with the grid system.\n            </p>\n            <DocsExample href=\"forms/layout#gutters\">\n              <CForm className=\"row g-3\">\n                <CCol md={6}>\n                  <CFormLabel htmlFor=\"inputEmail4\">Email</CFormLabel>\n                  <CFormInput type=\"email\" id=\"inputEmail4\" />\n                </CCol>\n                <CCol md={6}>\n                  <CFormLabel htmlFor=\"inputPassword4\">Password</CFormLabel>\n                  <CFormInput type=\"password\" id=\"inputPassword4\" />\n                </CCol>\n                <CCol xs={12}>\n                  <CFormLabel htmlFor=\"inputAddress\">Address</CFormLabel>\n                  <CFormInput id=\"inputAddress\" placeholder=\"1234 Main St\" />\n                </CCol>\n                <CCol xs={12}>\n                  <CFormLabel htmlFor=\"inputAddress2\">Address 2</CFormLabel>\n                  <CFormInput id=\"inputAddress2\" placeholder=\"Apartment, studio, or floor\" />\n                </CCol>\n                <CCol md={6}>\n                  <CFormLabel htmlFor=\"inputCity\">City</CFormLabel>\n                  <CFormInput id=\"inputCity\" />\n                </CCol>\n                <CCol md={4}>\n                  <CFormLabel htmlFor=\"inputState\">State</CFormLabel>\n                  <CFormSelect id=\"inputState\">\n                    <option>Choose...</option>\n                    <option>...</option>\n                  </CFormSelect>\n                </CCol>\n                <CCol md={2}>\n                  <CFormLabel htmlFor=\"inputZip\">Zip</CFormLabel>\n                  <CFormInput id=\"inputZip\" />\n                </CCol>\n                <CCol xs={12}>\n                  <CFormCheck type=\"checkbox\" id=\"gridCheck\" label=\"Check me out\" />\n                </CCol>\n                <CCol xs={12}>\n                  <CButton color=\"primary\" type=\"submit\">\n                    Sign in\n                  </CButton>\n                </CCol>\n              </CForm>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Layout</strong> <small>Horizontal form</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Create horizontal forms with the grid by adding the <code>.row</code> class to form\n              groups and using the <code>.col-*-*</code> classes to specify the width of your labels\n              and controls. Be sure to add <code>.col-form-label</code> to your{' '}\n              <code>&lt;CFormLabel&gt;</code>s as well so they&#39;re vertically centered with their\n              associated form controls.\n            </p>\n            <p className=\"text-body-secondary small\">\n              At times, you maybe need to use margin or padding utilities to create that perfect\n              alignment you need. For example, we&#39;ve removed the <code>padding-top</code> on our\n              stacked radio inputs label to better align the text baseline.\n            </p>\n            <DocsExample href=\"forms/layout#horizontal-form\">\n              <CForm>\n                <CRow className=\"mb-3\">\n                  <CFormLabel htmlFor=\"inputEmail3\" className=\"col-sm-2 col-form-label\">\n                    Email\n                  </CFormLabel>\n                  <CCol sm={10}>\n                    <CFormInput type=\"email\" id=\"inputEmail3\" />\n                  </CCol>\n                </CRow>\n                <CRow className=\"mb-3\">\n                  <CFormLabel htmlFor=\"inputPassword3\" className=\"col-sm-2 col-form-label\">\n                    Password\n                  </CFormLabel>\n                  <CCol sm={10}>\n                    <CFormInput type=\"password\" id=\"inputPassword3\" />\n                  </CCol>\n                </CRow>\n                <fieldset className=\"row mb-3\">\n                  <legend className=\"col-form-label col-sm-2 pt-0\">Radios</legend>\n                  <CCol sm={10}>\n                    <CFormCheck\n                      type=\"radio\"\n                      name=\"gridRadios\"\n                      id=\"gridRadios1\"\n                      value=\"option1\"\n                      label=\"First radio\"\n                      defaultChecked\n                    />\n                    <CFormCheck\n                      type=\"radio\"\n                      name=\"gridRadios\"\n                      id=\"gridRadios2\"\n                      value=\"option2\"\n                      label=\"Second radio\"\n                    />\n                    <CFormCheck\n                      type=\"radio\"\n                      name=\"gridRadios\"\n                      id=\"gridRadios3\"\n                      value=\"option3\"\n                      label=\"Third disabled radio\"\n                      disabled\n                    />\n                  </CCol>\n                </fieldset>\n                <CRow className=\"mb-3\">\n                  <div className=\"col-sm-10 offset-sm-2\">\n                    <CFormCheck type=\"checkbox\" id=\"gridCheck1\" label=\"Example checkbox\" />\n                  </div>\n                </CRow>\n                <CButton color=\"primary\" type=\"submit\">\n                  Sign in\n                </CButton>\n              </CForm>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Layout</strong> <small>Horizontal form label sizing</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Be sure to use <code>.col-form-label-sm</code> or <code>.col-form-label-lg</code> to\n              your <code>&lt;CFormLabel&gt;</code>s or <code>&lt;legend&gt;</code>s to correctly\n              follow the size of <code>.form-control-lg</code> and <code>.form-control-sm</code>.\n            </p>\n            <DocsExample href=\"forms/layout#horizontal-form-label-sizing\">\n              <CRow className=\"mb-3\">\n                <CFormLabel\n                  htmlFor=\"colFormLabelSm\"\n                  className=\"col-sm-2 col-form-label col-form-label-sm\"\n                >\n                  Email\n                </CFormLabel>\n                <CCol sm={10}>\n                  <CFormInput\n                    type=\"email\"\n                    className=\"form-control form-control-sm\"\n                    id=\"colFormLabelSm\"\n                    placeholder=\"col-form-label-sm\"\n                  />\n                </CCol>\n              </CRow>\n              <CRow className=\"mb-3\">\n                <CFormLabel htmlFor=\"colFormLabel\" className=\"col-sm-2 col-form-label\">\n                  Email\n                </CFormLabel>\n                <CCol sm={10}>\n                  <CFormInput type=\"email\" id=\"colFormLabel\" placeholder=\"col-form-label\" />\n                </CCol>\n              </CRow>\n              <CRow>\n                <CFormLabel\n                  htmlFor=\"colFormLabelLg\"\n                  className=\"col-sm-2 col-form-label col-form-label-lg\"\n                >\n                  Email\n                </CFormLabel>\n                <CCol sm={10}>\n                  <CFormInput\n                    type=\"email\"\n                    className=\"form-control form-control-lg\"\n                    id=\"colFormLabelLg\"\n                    placeholder=\"col-form-label-lg\"\n                  />\n                </CCol>\n              </CRow>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Layout</strong> <small>Column sizing</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              As shown in the previous examples, our grid system allows you to place any number of{' '}\n              <code>&lt;CCol&gt;</code>s within a <code>&lt;CRow&gt;</code>. They&#39;ll split the\n              available width equally between them. You may also pick a subset of your columns to\n              take up more or less space, while the remaining <code>&lt;CCol&gt;</code>s equally\n              split the rest, with specific column classes like{' '}\n              <code>&lt;CCol sm=&#34;7&#34;&gt;</code>.\n            </p>\n            <DocsExample href=\"forms/layout#column-sizing\">\n              <CRow className=\"g-3\">\n                <CCol sm={7}>\n                  <CFormInput placeholder=\"City\" aria-label=\"City\" />\n                </CCol>\n                <CCol sm>\n                  <CFormInput placeholder=\"State\" aria-label=\"State\" />\n                </CCol>\n                <CCol sm>\n                  <CFormInput placeholder=\"Zip\" aria-label=\"Zip\" />\n                </CCol>\n              </CRow>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Layout</strong> <small>Auto-sizing</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              The example below uses a flexbox utility to vertically center the contents and changes{' '}\n              <code>&lt;CCol&gt;</code> to <code>&lt;CCol xs=&#34;auto&#34;&gt;</code> so that your\n              columns only take up as much space as needed. Put another way, the column sizes itself\n              based on the contents.\n            </p>\n            <DocsExample href=\"forms/layout#auto-sizing\">\n              <CForm className=\"row gy-2 gx-3 align-items-center\">\n                <CCol xs=\"auto\">\n                  <CFormLabel className=\"visually-hidden\" htmlFor=\"autoSizingInput\">\n                    Name\n                  </CFormLabel>\n                  <CFormInput id=\"autoSizingInput\" placeholder=\"Jane Doe\" />\n                </CCol>\n                <CCol xs=\"auto\">\n                  <CFormLabel className=\"visually-hidden\" htmlFor=\"autoSizingInputGroup\">\n                    Username\n                  </CFormLabel>\n                  <CInputGroup>\n                    <CInputGroupText>@</CInputGroupText>\n                    <CFormInput id=\"autoSizingInputGroup\" placeholder=\"Username\" />\n                  </CInputGroup>\n                </CCol>\n                <CCol xs=\"auto\">\n                  <CFormLabel className=\"visually-hidden\" htmlFor=\"autoSizingSelect\">\n                    Preference\n                  </CFormLabel>\n                  <CFormSelect id=\"autoSizingSelect\">\n                    <option>Choose...</option>\n                    <option value=\"1\">One</option>\n                    <option value=\"2\">Two</option>\n                    <option value=\"3\">Three</option>\n                  </CFormSelect>\n                </CCol>\n                <CCol xs=\"auto\">\n                  <CFormCheck type=\"checkbox\" id=\"autoSizingCheck\" label=\"Remember me\" />\n                </CCol>\n                <CCol xs=\"auto\">\n                  <CButton color=\"primary\" type=\"submit\">\n                    Submit\n                  </CButton>\n                </CCol>\n              </CForm>\n            </DocsExample>\n            <p className=\"text-body-secondary small\">\n              You can then remix that once again with size-specific column classes.\n            </p>\n            <DocsExample href=\"forms/layout#auto-sizing\">\n              <CForm className=\"row gx-3 gy-2 align-items-center\">\n                <CCol sm={3}>\n                  <CFormLabel className=\"visually-hidden\" htmlFor=\"specificSizeInputName\">\n                    Name\n                  </CFormLabel>\n                  <CFormInput id=\"specificSizeInputName\" placeholder=\"Jane Doe\" />\n                </CCol>\n                <CCol sm={3}>\n                  <CFormLabel className=\"visually-hidden\" htmlFor=\"specificSizeInputGroupUsername\">\n                    Username\n                  </CFormLabel>\n                  <CInputGroup>\n                    <CInputGroupText>@</CInputGroupText>\n                    <CFormInput id=\"specificSizeInputGroupUsername\" placeholder=\"Username\" />\n                  </CInputGroup>\n                </CCol>\n                <CCol sm={3}>\n                  <CFormLabel className=\"visually-hidden\" htmlFor=\"specificSizeSelect\">\n                    Preference\n                  </CFormLabel>\n                  <CFormSelect id=\"specificSizeSelect\">\n                    <option>Choose...</option>\n                    <option value=\"1\">One</option>\n                    <option value=\"2\">Two</option>\n                    <option value=\"3\">Three</option>\n                  </CFormSelect>\n                </CCol>\n                <CCol xs=\"auto\">\n                  <CFormCheck type=\"checkbox\" id=\"autoSizingCheck2\" label=\"Remember me\" />\n                </CCol>\n                <CCol xs=\"auto\">\n                  <CButton color=\"primary\" type=\"submit\">\n                    Submit\n                  </CButton>\n                </CCol>\n              </CForm>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Layout</strong> <small>Inline forms</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Use the <code>&lt;CCol xs=&#34;auto&#34;&gt;</code> class to create horizontal\n              layouts. By adding{' '}\n              <a href=\"https://coreui.io/docs/layout/gutters/\">gutter modifier classes</a>, we will\n              have gutters in horizontal and vertical directions. The{' '}\n              <code>.align-items-center</code> aligns the form elements to the middle, making the{' '}\n              <code>&lt;CFormCheck&gt;</code> align properly.\n            </p>\n            <DocsExample href=\"forms/layout#inline-forms\">\n              <CForm className=\"row row-cols-lg-auto g-3 align-items-center\">\n                <CCol xs={12}>\n                  <CFormLabel className=\"visually-hidden\" htmlFor=\"inlineFormInputGroupUsername\">\n                    Username\n                  </CFormLabel>\n                  <CInputGroup>\n                    <CInputGroupText>@</CInputGroupText>\n                    <CFormInput id=\"inlineFormInputGroupUsername\" placeholder=\"Username\" />\n                  </CInputGroup>\n                </CCol>\n                <CCol xs={12}>\n                  <CFormLabel className=\"visually-hidden\" htmlFor=\"inlineFormSelectPref\">\n                    Preference\n                  </CFormLabel>\n                  <CFormSelect id=\"inlineFormSelectPref\">\n                    <option>Choose...</option>\n                    <option value=\"1\">One</option>\n                    <option value=\"2\">Two</option>\n                    <option value=\"3\">Three</option>\n                  </CFormSelect>\n                </CCol>\n                <CCol xs={12}>\n                  <CFormCheck type=\"checkbox\" id=\"inlineFormCheck\" label=\"Remember me\" />\n                </CCol>\n                <CCol xs={12}>\n                  <CButton color=\"primary\" type=\"submit\">\n                    Submit\n                  </CButton>\n                </CCol>\n              </CForm>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Layout\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n  /**\n   * Sets the component's color scheme to one of CoreUI's themed colors, ensuring the text color contrast adheres to the WCAG 4.5:1 contrast ratio standard for accessibility.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   * @since 5.0.0-rc.3\n   */\n  textBgColor?: Colors\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textBgColor, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n            [`text-bg-${textBgColor}`]: textBgColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textBgColor: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { forwardRef, FormHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormProps extends FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Mark a form as validated. If you set it `true`, all validation styles will be applied to the forms component.\n   */\n  validated?: boolean\n}\n\nexport const CForm = forwardRef<HTMLFormElement, CFormProps>(\n  ({ children, className, validated, ...rest }, ref) => {\n    return (\n      <form\n        className={classNames({ 'was-validated': validated }, className) || undefined}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </form>\n    )\n  },\n)\n\nCForm.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  validated: PropTypes.bool,\n}\n\nCForm.displayName = 'CForm'\n","import React, { forwardRef, InputHTMLAttributes, ReactNode, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormLabel } from './CFormLabel'\n\nimport { useForkedRef } from '../../hooks'\nimport type { Colors, Shapes } from '../../types'\n\nexport type ButtonObject = {\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Select the shape of the component.\n   *\n   * @type 'rounded' | 'rounded-top' | 'rounded-end' | 'rounded-bottom' | 'rounded-start' | 'rounded-circle' | 'rounded-pill' | 'rounded-0' | 'rounded-1' | 'rounded-2' | 'rounded-3' | string\n   */\n  shape?: Shapes\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Set the button variant to an outlined button or a ghost button.\n   */\n  variant?: 'outline' | 'ghost'\n}\n\nexport interface CFormCheckProps\n  extends CFormControlValidationProps,\n    InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Create button-like checkboxes and radio buttons.\n   */\n  button?: ButtonObject\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets hit area to the full area of the component.\n   */\n  hitArea?: 'full'\n  /**\n   * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n   */\n  id?: string\n  /**\n   * Input Checkbox indeterminate Property.\n   */\n  indeterminate?: boolean\n  /**\n   * Group checkboxes or radios on the same horizontal row.\n   */\n  inline?: boolean\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * The element represents a caption for a component.\n   */\n  label?: string | ReactNode\n  /**\n   * Put checkboxes or radios on the opposite side.\n   *\n   * @sinve 4.7.0\n   */\n  reverse?: boolean\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'checkbox' | 'radio'\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormCheck = forwardRef<HTMLInputElement, CFormCheckProps>(\n  (\n    {\n      className,\n      button,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingLabel,\n      tooltipFeedback,\n      hitArea,\n      id,\n      indeterminate,\n      inline,\n      invalid,\n      label,\n      reverse,\n      type = 'checkbox',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null)\n    const forkedRef = useForkedRef(ref, inputRef)\n\n    useEffect(() => {\n      if (inputRef.current && indeterminate) {\n        inputRef.current.indeterminate = indeterminate\n      }\n    }, [indeterminate, inputRef.current])\n\n    const FormControl = () => (\n      <input\n        type={type}\n        className={classNames(button ? 'btn-check' : 'form-check-input', {\n          'is-invalid': invalid,\n          'is-valid': valid,\n          'me-2': hitArea,\n        })}\n        id={id}\n        {...rest}\n        ref={forkedRef}\n      />\n    )\n\n    const FormValidation = () => (\n      <CFormControlValidation\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingLabel={floatingLabel}\n        invalid={invalid}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      />\n    )\n\n    const FormLabel = () => (\n      <CFormLabel\n        customClassName={classNames(\n          button\n            ? classNames(\n                'btn',\n                button.variant ? `btn-${button.variant}-${button.color}` : `btn-${button.color}`,\n                {\n                  [`btn-${button.size}`]: button.size,\n                },\n                `${button.shape}`,\n              )\n            : 'form-check-label',\n        )}\n        {...(id && { htmlFor: id })}\n      >\n        {label}\n      </CFormLabel>\n    )\n\n    const FormCheck = () => {\n      if (button) {\n        return (\n          <>\n            <FormControl />\n            {label && <FormLabel />}\n            <FormValidation />\n          </>\n        )\n      }\n\n      if (label) {\n        return hitArea ? (\n          <>\n            <FormControl />\n            <CFormLabel\n              customClassName={classNames('form-check-label stretched-link', className)}\n              {...(id && { htmlFor: id })}\n            >\n              {label}\n            </CFormLabel>\n            <FormValidation />\n          </>\n        ) : (\n          <div\n            className={classNames(\n              'form-check',\n              {\n                'form-check-inline': inline,\n                'form-check-reverse': reverse,\n                'is-invalid': invalid,\n                'is-valid': valid,\n              },\n              className,\n            )}\n          >\n            <FormControl />\n            <FormLabel />\n            <FormValidation />\n          </div>\n        )\n      }\n\n      return <FormControl />\n    }\n\n    return <FormCheck />\n  },\n)\n\nCFormCheck.propTypes = {\n  button: PropTypes.object,\n  className: PropTypes.string,\n  hitArea: PropTypes.oneOf(['full']),\n  id: PropTypes.string,\n  indeterminate: PropTypes.bool,\n  inline: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormCheck.displayName = 'CFormCheck'\n","import React, { FC, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CFormFeedback } from './CFormFeedback'\n\nexport interface CFormControlValidationProps {\n  /**\n   * @ignore\n   */\n  describedby?: string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedback?: ReactNode | string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedbackInvalid?: ReactNode | string\n  /**\n   * Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  feedbackValid?: ReactNode | string\n  /**\n   * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  floatingLabel?: ReactNode | string\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * Display validation feedback in a styled tooltip.\n   *\n   * @since 4.2.0\n   */\n  tooltipFeedback?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormControlValidation: FC<CFormControlValidationProps> = ({\n  describedby,\n  feedback,\n  feedbackInvalid,\n  feedbackValid,\n  invalid,\n  tooltipFeedback,\n  valid,\n}) => {\n  return (\n    <>\n      {feedback && (valid || invalid) && (\n        <CFormFeedback\n          {...(invalid && { id: describedby })}\n          invalid={invalid}\n          tooltip={tooltipFeedback}\n          valid={valid}\n        >\n          {feedback}\n        </CFormFeedback>\n      )}\n      {feedbackInvalid && (\n        <CFormFeedback id={describedby} invalid tooltip={tooltipFeedback}>\n          {feedbackInvalid}\n        </CFormFeedback>\n      )}\n      {feedbackValid && (\n        <CFormFeedback valid tooltip={tooltipFeedback}>\n          {feedbackValid}\n        </CFormFeedback>\n      )}\n    </>\n  )\n}\n\nCFormControlValidation.propTypes = {\n  describedby: PropTypes.string,\n  feedback: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackValid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackInvalid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  invalid: PropTypes.bool,\n  tooltipFeedback: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormControlValidation.displayName = 'CFormControlValidation'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CFormTextProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CFormText: PolymorphicRefForwardingComponent<'div', CFormTextProps> = forwardRef<\n  HTMLDivElement | HTMLSpanElement,\n  CFormTextProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('form-text', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCFormText.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCFormText.displayName = 'CFormText'\n","import React, { FC, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormFloating } from './CFormFloating'\nimport { CFormLabel } from './CFormLabel'\nimport { CFormText } from './CFormText'\n\nexport interface CFormControlWrapperProps extends CFormControlValidationProps {\n  /**\n   * @ignore\n   */\n  children?: ReactNode\n  /**\n   * A string of all className you want applied to the floating label wrapper.\n   *\n   * @since 4.5.0\n   */\n  floatingClassName?: string\n  /**\n   * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  floatingLabel?: ReactNode | string\n  /**\n   * @ignore\n   */\n  id?: string\n  /**\n   * Add a caption for a component.\n   *\n   * @since 4.2.0\n   */\n  label?: ReactNode | string\n  /**\n   * Add helper text to the component.\n   *\n   * @since 4.2.0\n   */\n  text?: ReactNode | string\n}\n\nexport const CFormControlWrapper: FC<CFormControlWrapperProps> = ({\n  children,\n  describedby,\n  feedback,\n  feedbackInvalid,\n  feedbackValid,\n  floatingClassName,\n  floatingLabel,\n  id,\n  invalid,\n  label,\n  text,\n  tooltipFeedback,\n  valid,\n}) => {\n  const FormControlValidation = () => (\n    <CFormControlValidation\n      describedby={describedby}\n      feedback={feedback}\n      feedbackInvalid={feedbackInvalid}\n      feedbackValid={feedbackValid}\n      floatingLabel={floatingLabel}\n      invalid={invalid}\n      tooltipFeedback={tooltipFeedback}\n      valid={valid}\n    />\n  )\n  return floatingLabel ? (\n    <CFormFloating className={floatingClassName}>\n      {children}\n      <CFormLabel htmlFor={id}>{label || floatingLabel}</CFormLabel>\n      {text && <CFormText id={describedby}>{text}</CFormText>}\n      <FormControlValidation />\n    </CFormFloating>\n  ) : (\n    <>\n      {label && <CFormLabel htmlFor={id}>{label}</CFormLabel>}\n      {children}\n      {text && <CFormText id={describedby}>{text}</CFormText>}\n      <FormControlValidation />\n    </>\n  )\n}\n\nCFormControlWrapper.propTypes = {\n  children: PropTypes.node,\n  floatingClassName: PropTypes.string,\n  floatingLabel: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  label: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  text: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormControlWrapper.displayName = 'CFormControlWrapper'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CFormFeedbackProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  invalid?: boolean\n  /**\n   * If your form layout allows it, you can display validation feedback in a styled tooltip.\n   */\n  tooltip?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormFeedback: PolymorphicRefForwardingComponent<'div', CFormFeedbackProps> =\n  forwardRef<HTMLDivElement | HTMLSpanElement, CFormFeedbackProps>(\n    ({ children, as: Component = 'div', className, invalid, tooltip, valid, ...rest }, ref) => {\n      return (\n        <Component\n          className={classNames(\n            {\n              [`invalid-${tooltip ? 'tooltip' : 'feedback'}`]: invalid,\n              [`valid-${tooltip ? 'tooltip' : 'feedback'}`]: valid,\n            },\n            className,\n          )}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </Component>\n      )\n    },\n  )\n\nCFormFeedback.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  invalid: PropTypes.bool,\n  tooltip: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormFeedback.displayName = 'CFormFeedback'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormFloatingProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CFormFloating = forwardRef<HTMLDivElement, CFormFloatingProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('form-floating', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCFormFloating.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCFormFloating.displayName = 'CFormFloating'\n","import React, {\n  ChangeEventHandler,\n  forwardRef,\n  InputHTMLAttributes,\n  useEffect,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\nexport interface CFormInputProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Delay onChange event while typing. If set to true onChange event will be delayed 500ms, you can also provide the number of milliseconds you want to delay the onChange event.\n   */\n  delay?: boolean | number\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLInputElement>\n  /**\n   * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n   */\n  plainText?: boolean\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'color' | 'file' | 'text' | string\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormInput = forwardRef<HTMLInputElement, CFormInputProps>(\n  (\n    {\n      children,\n      className,\n      delay = false,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      id,\n      invalid,\n      label,\n      onChange,\n      plainText,\n      size,\n      text,\n      tooltipFeedback,\n      type = 'text',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const [value, setValue] = useState<React.ChangeEvent<HTMLInputElement>>()\n\n    useEffect(() => {\n      const timeOutId = setTimeout(\n        () => value && onChange && onChange(value),\n        typeof delay === 'number' ? delay : 500,\n      )\n\n      return () => clearTimeout(timeOutId)\n    }, [value])\n\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <input\n          className={classNames(\n            plainText ? 'form-control-plaintext' : 'form-control',\n            {\n              [`form-control-${size}`]: size,\n              'form-control-color': type === 'color',\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          id={id}\n          type={type}\n          onChange={(event) => (delay ? setValue(event) : onChange && onChange(event))}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </input>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormInput.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  delay: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  plainText: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg']),\n  type: PropTypes.oneOfType([PropTypes.oneOf(['color', 'file', 'text']), PropTypes.string]),\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormInput.displayName = 'CFormInput'\n","import React, { forwardRef, LabelHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormLabelProps extends LabelHTMLAttributes<HTMLLabelElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * A string of all className you want to be applied to the component, and override standard className value.\n   */\n  customClassName?: string\n}\n\nexport const CFormLabel = forwardRef<HTMLLabelElement, CFormLabelProps>(\n  ({ children, className, customClassName, ...rest }, ref) => {\n    return (\n      <label className={customClassName ?? classNames('form-label', className)} {...rest} ref={ref}>\n        {children}\n      </label>\n    )\n  },\n)\n\nCFormLabel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  customClassName: PropTypes.string,\n}\n\nCFormLabel.displayName = 'CFormLabel'\n","import React, { ChangeEventHandler, forwardRef, InputHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\ntype Option = {\n  disabled?: boolean\n  label?: string\n  value?: string\n}\n\nexport interface CFormSelectProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLSelectElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Specifies the number of visible options in a drop-down list.\n   */\n  htmlSize?: number\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLSelectElement>\n  /**\n   * Options list of the select component. Available keys: `label`, `value`, `disabled`.\n   * Examples:\n   * - `options={[{ value: 'js', label: 'JavaScript' }, { value: 'html', label: 'HTML', disabled: true }]}`\n   * - `options={['js', 'html']}`\n   */\n  options?: Option[] | string[]\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   */\n  value?: string | string[] | number\n}\n\nexport const CFormSelect = forwardRef<HTMLSelectElement, CFormSelectProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      htmlSize,\n      id,\n      invalid,\n      label,\n      options,\n      size,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <select\n          id={id}\n          className={classNames(\n            'form-select',\n            {\n              [`form-select-${size}`]: size,\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          size={htmlSize}\n          {...rest}\n          ref={ref}\n        >\n          {options\n            ? options.map((option, index) => {\n                return (\n                  <option\n                    {...(typeof option === 'object' &&\n                      option.disabled && { disabled: option.disabled })}\n                    {...(typeof option === 'object' &&\n                      option.value !== undefined && { value: option.value })}\n                    key={index}\n                  >\n                    {typeof option === 'string' ? option : option.label}\n                  </option>\n                )\n              })\n            : children}\n        </select>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormSelect.propTypes = {\n  className: PropTypes.string,\n  htmlSize: PropTypes.number,\n  options: PropTypes.array,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormSelect.displayName = 'CFormSelect'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CInputGroupProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n}\n\nexport const CInputGroup = forwardRef<HTMLDivElement, CInputGroupProps>(\n  ({ children, className, size, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'input-group',\n          {\n            [`input-group-${size}`]: size,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCInputGroup.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  size: PropTypes.oneOf(['sm', 'lg']),\n}\n\nCInputGroup.displayName = 'CInputGroup'\n","import React, { ElementType, forwardRef, LabelHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CInputGroupTextProps\n  extends LabelHTMLAttributes<HTMLLabelElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CInputGroupText: PolymorphicRefForwardingComponent<'span', CInputGroupTextProps> =\n  forwardRef<HTMLLabelElement | HTMLSpanElement, CInputGroupTextProps>(\n    ({ children, as: Component = 'span', className, ...rest }, ref) => {\n      return (\n        <Component className={classNames('input-group-text', className)} {...rest} ref={ref}>\n          {children}\n        </Component>\n      )\n    },\n  )\n\nCInputGroupText.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCInputGroupText.displayName = 'CInputGroupText'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\ntype Span = 'auto' | number | string | boolean | null\n\ntype BPObject = {\n  span?: Span\n  offset?: number | string | null\n  order?: 'first' | 'last' | number | string | null\n}\n\ntype Col = Span | BPObject\n\nexport interface CColProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xs?: Col\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  sm?: Col\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  md?: Col\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  lg?: Col\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xl?: Col\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xxl?: Col\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CCol = forwardRef<HTMLDivElement, CColProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n        repsonsiveClassNames.push(`col${infix}-${breakpoint}`)\n      }\n\n      if (typeof breakpoint === 'boolean') {\n        repsonsiveClassNames.push(`col${infix}`)\n      }\n\n      if (breakpoint && typeof breakpoint === 'object') {\n        if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n          repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`)\n        }\n\n        if (typeof breakpoint.span === 'boolean') {\n          repsonsiveClassNames.push(`col${infix}`)\n        }\n\n        if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n          repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`)\n        }\n\n        if (typeof breakpoint.offset === 'number') {\n          repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`)\n        }\n      }\n    })\n\n    return (\n      <div\n        className={classNames(\n          repsonsiveClassNames.length > 0 ? repsonsiveClassNames : 'col',\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nconst span = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.oneOf(['auto']),\n])\n\nconst col = PropTypes.oneOfType([\n  span,\n  PropTypes.shape({\n    span: span,\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    order: PropTypes.oneOfType([\n      PropTypes.oneOf(['first', 'last']),\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  }),\n])\n\nCCol.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: col,\n  sm: col,\n  md: col,\n  lg: col,\n  xl: col,\n  xxl: col,\n}\n\nCCol.displayName = 'CCol'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport type BPObject = {\n  cols?: 'auto' | number | string | null\n  gutter?: number | string | null\n  gutterX?: number | string | null\n  gutterY?: number | string | null\n}\n\nexport interface CRowProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xs?: BPObject\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  sm?: BPObject\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  md?: BPObject\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  lg?: BPObject\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xl?: BPObject\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xxl?: BPObject\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CRow = forwardRef<HTMLDivElement, CRowProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'object') {\n        if (breakpoint.cols) {\n          repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`)\n        }\n\n        if (typeof breakpoint.gutter === 'number') {\n          repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`)\n        }\n\n        if (typeof breakpoint.gutterX === 'number') {\n          repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`)\n        }\n\n        if (typeof breakpoint.gutterY === 'number') {\n          repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`)\n        }\n      }\n    })\n\n    return (\n      <div className={classNames('row', repsonsiveClassNames, className)} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nconst bp = PropTypes.shape({\n  cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n})\n\nCRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: bp,\n  sm: bp,\n  md: bp,\n  lg: bp,\n  xl: bp,\n  xxl: bp,\n}\n\nCRow.displayName = 'CRow'\n"],"names":["Layout","_jsxs","CRow","children","_jsx","CCol","xs","CCard","className","CCardHeader","CCardBody","DocsExample","href","CFormInput","placeholder","CForm","md","CFormLabel","htmlFor","type","id","CFormSelect","CFormCheck","label","CButton","color","sm","name","value","defaultChecked","disabled","CInputGroup","CInputGroupText","forwardRef","_a","ref","textBgColor","textColor","rest","__rest","React","__assign","classNames","_b","concat","propTypes","PropTypes","colorPropType","displayName","as","Component","validated","undefined","button","feedback","feedbackInvalid","feedbackValid","floatingLabel","tooltipFeedback","hitArea","indeterminate","inline","invalid","reverse","valid","inputRef","useRef","forkedRef","useForkedRef","useEffect","current","FormControl","FormValidation","CFormControlValidation","describedby","FormLabel","customClassName","variant","size","shape","CFormFeedback","tooltip","CFormText","CFormControlWrapper","floatingClassName","text","FormControlValidation","CFormFloating","_c","delay","onChange","plainText","_d","_e","useState","setValue","timeOutId","setTimeout","clearTimeout","event","htmlSize","options","map","option","index","key","BREAKPOINTS","repsonsiveClassNames","forEach","bp","breakpoint","infix","push","span","order","offset","length","col","lg","xl","xxl","cols","gutter","gutterX","gutterY"],"sourceRoot":""}