{"version":3,"file":"static/js/2794.ecf0815e.chunk.js","mappings":"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","sources":["views/forms/validation/Validation.js","../node_modules/@coreui/react/src/components/card/CCard.tsx","../node_modules/@coreui/react/src/components/card/CCardBody.tsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/form/CForm.tsx","../node_modules/@coreui/react/src/components/form/CFormCheck.tsx","../node_modules/@coreui/react/src/components/form/CFormControlValidation.tsx","../node_modules/@coreui/react/src/components/form/CFormText.tsx","../node_modules/@coreui/react/src/components/form/CFormControlWrapper.tsx","../node_modules/@coreui/react/src/components/form/CFormFeedback.tsx","../node_modules/@coreui/react/src/components/form/CFormFloating.tsx","../node_modules/@coreui/react/src/components/form/CFormInput.tsx","../node_modules/@coreui/react/src/components/form/CFormLabel.tsx","../node_modules/@coreui/react/src/components/form/CFormSelect.tsx","../node_modules/@coreui/react/src/components/form/CFormTextarea.tsx","../node_modules/@coreui/react/src/components/form/CInputGroup.tsx","../node_modules/@coreui/react/src/components/form/CInputGroupText.tsx","../node_modules/@coreui/react/src/components/grid/CCol.tsx","../node_modules/@coreui/react/src/components/grid/CRow.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormCheck,\n  CFormInput,\n  CFormFeedback,\n  CFormLabel,\n  CFormSelect,\n  CFormTextarea,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n} from '@coreui/react'\nimport { DocsExample } from '../../../components'\n\nconst CustomStyles = () => {\n  const [validated, setValidated] = useState(false)\n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    setValidated(true)\n  }\n  return (\n    <CForm\n      className=\"row g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={4}>\n        <CFormLabel htmlFor=\"validationCustom01\">Email</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationCustom01\" defaultValue=\"Mark\" required />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol md={4}>\n        <CFormLabel htmlFor=\"validationCustom02\">Email</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationCustom02\" defaultValue=\"Otto\" required />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol md={4}>\n        <CFormLabel htmlFor=\"validationCustomUsername\">Username</CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText id=\"inputGroupPrepend\">@</CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            id=\"validationCustomUsername\"\n            defaultValue=\"\"\n            aria-describedby=\"inputGroupPrepend\"\n            required\n          />\n          <CFormFeedback invalid>Please choose a username.</CFormFeedback>\n        </CInputGroup>\n      </CCol>\n      <CCol md={6}>\n        <CFormLabel htmlFor=\"validationCustom03\">City</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationCustom03\" required />\n        <CFormFeedback invalid>Please provide a valid city.</CFormFeedback>\n      </CCol>\n      <CCol md={3}>\n        <CFormLabel htmlFor=\"validationCustom04\">City</CFormLabel>\n        <CFormSelect id=\"validationCustom04\">\n          <option disabled>Choose...</option>\n          <option>...</option>\n        </CFormSelect>\n        <CFormFeedback invalid>Please provide a valid city.</CFormFeedback>\n      </CCol>\n      <CCol md={3}>\n        <CFormLabel htmlFor=\"validationCustom05\">City</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationCustom05\" required />\n        <CFormFeedback invalid>Please provide a valid zip.</CFormFeedback>\n      </CCol>\n      <CCol xs={12}>\n        <CFormCheck\n          type=\"checkbox\"\n          id=\"invalidCheck\"\n          label=\"Agree to terms and conditions\"\n          required\n        />\n        <CFormFeedback invalid>You must agree before submitting.</CFormFeedback>\n      </CCol>\n      <CCol xs={12}>\n        <CButton color=\"primary\" type=\"submit\">\n          Submit form\n        </CButton>\n      </CCol>\n    </CForm>\n  )\n}\n\nconst BrowserDefaults = () => {\n  const [validated, setValidated] = useState(false)\n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    setValidated(true)\n  }\n  return (\n    <CForm className=\"row g-3 needs-validation\" validated={validated} onSubmit={handleSubmit}>\n      <CCol md={4}>\n        <CFormLabel htmlFor=\"validationDefault01\">Email</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationDefault01\" defaultValue=\"Mark\" required />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol md={4}>\n        <CFormLabel htmlFor=\"validationDefault02\">Email</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationDefault02\" defaultValue=\"Otto\" required />\n        <CFormFeedback valid>Looks good!</CFormFeedback>\n      </CCol>\n      <CCol md={4}>\n        <CFormLabel htmlFor=\"validationDefaultUsername\">Username</CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText id=\"inputGroupPrepend02\">@</CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            id=\"validationDefaultUsername\"\n            defaultValue=\"\"\n            aria-describedby=\"inputGroupPrepend02\"\n            required\n          />\n          <CFormFeedback invalid>Please choose a username.</CFormFeedback>\n        </CInputGroup>\n      </CCol>\n      <CCol md={6}>\n        <CFormLabel htmlFor=\"validationDefault03\">City</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationDefault03\" required />\n        <CFormFeedback invalid>Please provide a valid city.</CFormFeedback>\n      </CCol>\n      <CCol md={3}>\n        <CFormLabel htmlFor=\"validationDefault04\">City</CFormLabel>\n        <CFormSelect id=\"validationDefault04\">\n          <option disabled>Choose...</option>\n          <option>...</option>\n        </CFormSelect>\n        <CFormFeedback invalid>Please provide a valid city.</CFormFeedback>\n      </CCol>\n      <CCol md={3}>\n        <CFormLabel htmlFor=\"validationDefault05\">City</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationDefault05\" required />\n        <CFormFeedback invalid>Please provide a valid zip.</CFormFeedback>\n      </CCol>\n      <CCol xs={12}>\n        <CFormCheck\n          type=\"checkbox\"\n          id=\"invalidCheck\"\n          label=\"Agree to terms and conditions\"\n          required\n        />\n        <CFormFeedback invalid>You must agree before submitting.</CFormFeedback>\n      </CCol>\n      <CCol xs={12}>\n        <CButton color=\"primary\" type=\"submit\">\n          Submit form\n        </CButton>\n      </CCol>\n    </CForm>\n  )\n}\n\nconst Tooltips = () => {\n  const [validated, setValidated] = useState(false)\n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    setValidated(true)\n  }\n  return (\n    <CForm\n      className=\"row g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={4} className=\"position-relative\">\n        <CFormLabel htmlFor=\"validationTooltip01\">Email</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationTooltip01\" defaultValue=\"Mark\" required />\n        <CFormFeedback tooltip valid>\n          Looks good!\n        </CFormFeedback>\n      </CCol>\n      <CCol md={4} className=\"position-relative\">\n        <CFormLabel htmlFor=\"validationTooltip02\">Email</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationTooltip02\" defaultValue=\"Otto\" required />\n        <CFormFeedback tooltip valid>\n          Looks good!\n        </CFormFeedback>\n      </CCol>\n      <CCol md={4} className=\"position-relative\">\n        <CFormLabel htmlFor=\"validationTooltipUsername\">Username</CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText id=\"inputGroupPrepend\">@</CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            id=\"validationTooltipUsername\"\n            defaultValue=\"\"\n            aria-describedby=\"inputGroupPrepend\"\n            required\n          />\n          <CFormFeedback tooltip invalid>\n            Please choose a username.\n          </CFormFeedback>\n        </CInputGroup>\n      </CCol>\n      <CCol md={6} className=\"position-relative\">\n        <CFormLabel htmlFor=\"validationTooltip03\">City</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationTooltip03\" required />\n        <CFormFeedback tooltip invalid>\n          Please provide a valid city.\n        </CFormFeedback>\n      </CCol>\n      <CCol md={3} className=\"position-relative\">\n        <CFormLabel htmlFor=\"validationTooltip04\">City</CFormLabel>\n        <CFormSelect id=\"validationTooltip04\" required>\n          <option disabled defaultValue=\"\">\n            Choose...\n          </option>\n          <option>...</option>\n        </CFormSelect>\n        <CFormFeedback tooltip invalid>\n          Please provide a valid city.\n        </CFormFeedback>\n      </CCol>\n      <CCol md={3} className=\"position-relative\">\n        <CFormLabel htmlFor=\"validationTooltip05\">City</CFormLabel>\n        <CFormInput type=\"text\" id=\"validationTooltip05\" required />\n        <CFormFeedback tooltip invalid>\n          Please provide a valid zip.\n        </CFormFeedback>\n      </CCol>\n      <CCol xs={12} className=\"position-relative\">\n        <CButton color=\"primary\" type=\"submit\">\n          Submit form\n        </CButton>\n      </CCol>\n    </CForm>\n  )\n}\n\nconst Validation = () => {\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Validation</strong> <small>Custom styles</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              For custom CoreUI form validation messages, you&#39;ll need to add the{' '}\n              <code>noValidate</code> boolean property to your <code>&lt;CForm&gt;</code>. This\n              disables the browser default feedback tooltips, but still provides access to the form\n              validation APIs in JavaScript. Try to submit the form below; our JavaScript will\n              intercept the submit button and relay feedback to you. When attempting to submit,\n              you&#39;ll see the <code>:invalid</code> and <code>:valid</code> styles applied to\n              your form controls.\n            </p>\n            <p className=\"text-body-secondary small\">\n              Custom feedback styles apply custom colors, borders, focus styles, and background\n              icons to better communicate feedback.{' '}\n            </p>\n            <DocsExample href=\"forms/validation\">{CustomStyles()}</DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Validation</strong> <small>Browser defaults</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Not interested in custom validation feedback messages or writing JavaScript to change\n              form behaviors? All good, you can use the browser defaults. Try submitting the form\n              below. Depending on your browser and OS, you&#39;ll see a slightly different style of\n              feedback.\n            </p>\n            <p className=\"text-body-secondary small\">\n              While these feedback styles cannot be styled with CSS, you can still customize the\n              feedback text through JavaScript.\n            </p>\n            <DocsExample href=\"forms/validation#browser-defaults\">{BrowserDefaults()}</DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Validation</strong> <small>Server side</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              We recommend using client-side validation, but in case you require server-side\n              validation, you can indicate invalid and valid form fields with <code>invalid</code>{' '}\n              and <code>valid</code> boolean properties.\n            </p>\n            <p className=\"text-body-secondary small\">\n              For invalid fields, ensure that the invalid feedback/error message is associated with\n              the relevant form field using <code>aria-describedby</code> (noting that this\n              attribute allows more than one <code>id</code> to be referenced, in case the field\n              already points to additional form text).\n            </p>\n            <DocsExample href=\"forms/validation#server-side\">\n              <CForm className=\"row g-3 needs-validation\">\n                <CCol md={4}>\n                  <CFormLabel htmlFor=\"validationServer01\">Email</CFormLabel>\n                  <CFormInput\n                    type=\"text\"\n                    id=\"validationServer01\"\n                    defaultValue=\"Mark\"\n                    valid\n                    required\n                  />\n                  <CFormFeedback valid>Looks good!</CFormFeedback>\n                </CCol>\n                <CCol md={4}>\n                  <CFormLabel htmlFor=\"validationServer02\">Email</CFormLabel>\n                  <CFormInput\n                    type=\"text\"\n                    id=\"validationServer02\"\n                    defaultValue=\"Otto\"\n                    valid\n                    required\n                  />\n                  <CFormFeedback valid>Looks good!</CFormFeedback>\n                </CCol>\n                <CCol md={4}>\n                  <CFormLabel htmlFor=\"validationServerUsername\">Username</CFormLabel>\n                  <CInputGroup className=\"has-validation\">\n                    <CInputGroupText id=\"inputGroupPrepend03\">@</CInputGroupText>\n                    <CFormInput\n                      type=\"text\"\n                      id=\"validationServerUsername\"\n                      defaultValue=\"\"\n                      aria-describedby=\"inputGroupPrepend03\"\n                      invalid\n                      required\n                    />\n                    <CFormFeedback invalid>Please choose a username.</CFormFeedback>\n                  </CInputGroup>\n                </CCol>\n                <CCol md={6}>\n                  <CFormLabel htmlFor=\"validationServer03\">City</CFormLabel>\n                  <CFormInput type=\"text\" id=\"validationServer03\" invalid required />\n                  <CFormFeedback invalid>Please provide a valid city.</CFormFeedback>\n                </CCol>\n                <CCol md={3}>\n                  <CFormLabel htmlFor=\"validationServer04\">City</CFormLabel>\n                  <CFormSelect id=\"validationServer04\" invalid>\n                    <option disabled>Choose...</option>\n                    <option>...</option>\n                  </CFormSelect>\n                  <CFormFeedback invalid>Please provide a valid city.</CFormFeedback>\n                </CCol>\n                <CCol md={3}>\n                  <CFormLabel htmlFor=\"validationServer05\">City</CFormLabel>\n                  <CFormInput type=\"text\" id=\"validationServer05\" invalid required />\n                  <CFormFeedback invalid>Please provide a valid zip.</CFormFeedback>\n                </CCol>\n                <CCol xs={12}>\n                  <CFormCheck\n                    type=\"checkbox\"\n                    id=\"invalidCheck\"\n                    label=\"Agree to terms and conditions\"\n                    invalid\n                    required\n                  />\n                  <CFormFeedback invalid>You must agree before submitting.</CFormFeedback>\n                </CCol>\n                <CCol xs={12}>\n                  <CButton color=\"primary\" type=\"submit\">\n                    Submit form\n                  </CButton>\n                </CCol>\n              </CForm>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Validation</strong> <small>Supported elements</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Validation styles are available for the following form controls and components:\n            </p>\n            <ul>\n              <li>\n                <code>&lt;CFormInput&gt;</code>s\n              </li>\n              <li>\n                <code>&lt;CFormSelect&gt;</code>s\n              </li>\n              <li>\n                <code>&lt;CFormCheck&gt;</code>s\n              </li>\n            </ul>\n            <DocsExample href=\"forms/validation#supported-elements\">\n              <CForm validated={true}>\n                <div className=\"mb-3\">\n                  <CFormLabel htmlFor=\"validationTextarea\" className=\"form-label\">\n                    Textarea\n                  </CFormLabel>\n                  <CFormTextarea\n                    id=\"validationTextarea\"\n                    placeholder=\"Required example textarea\"\n                    invalid\n                    required\n                  ></CFormTextarea>\n                  <CFormFeedback invalid>Please enter a message in the textarea.</CFormFeedback>\n                </div>\n                <CFormCheck\n                  className=\"mb-3\"\n                  id=\"validationFormCheck1\"\n                  label=\"Check this checkbox\"\n                  required\n                />\n                <CFormFeedback invalid>Example invalid feedback text</CFormFeedback>\n\n                <CFormCheck\n                  type=\"radio\"\n                  name=\"radio-stacked\"\n                  id=\"validationFormCheck2\"\n                  label=\"Check this checkbox\"\n                  required\n                />\n\n                <CFormCheck\n                  className=\"mb-3\"\n                  type=\"radio\"\n                  name=\"radio-stacked\"\n                  id=\"validationFormCheck3\"\n                  label=\"Or toggle this other radio\"\n                  required\n                />\n                <CFormFeedback invalid>More example invalid feedback text</CFormFeedback>\n\n                <div className=\"mb-3\">\n                  <CFormSelect required aria-label=\"select example\">\n                    <option>Open this select menu</option>\n                    <option value=\"1\">One</option>\n                    <option value=\"2\">Two</option>\n                    <option value=\"3\">Three</option>\n                  </CFormSelect>\n                  <CFormFeedback invalid>Example invalid select feedback</CFormFeedback>\n                </div>\n\n                <div className=\"mb-3\">\n                  <CFormInput\n                    type=\"file\"\n                    id=\"validationTextarea\"\n                    aria-label=\"file example\"\n                    required\n                  />\n                  <CFormFeedback invalid>Example invalid form file feedback</CFormFeedback>\n                </div>\n\n                <div className=\"mb-3\">\n                  <CButton type=\"submit\" color=\"primary\" disabled>\n                    Submit form\n                  </CButton>\n                </div>\n              </CForm>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Validation</strong> <small>Tooltips</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              If your form layout allows it, you can swap the text for the tooltip to display\n              validation feedback in a styled tooltip. Be sure to have a parent with{' '}\n              <code>position: relative</code> on it for tooltip positioning. In the example below,\n              our column classes have this already, but your project may require an alternative\n              setup.\n            </p>\n            <DocsExample href=\"forms/validation#tooltips\">{Tooltips()}</DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Validation\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n  /**\n   * Sets the component's color scheme to one of CoreUI's themed colors, ensuring the text color contrast adheres to the WCAG 4.5:1 contrast ratio standard for accessibility.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   * @since 5.0.0-rc.3\n   */\n  textBgColor?: Colors\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textBgColor, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n            [`text-bg-${textBgColor}`]: textBgColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textBgColor: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { forwardRef, FormHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormProps extends FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Mark a form as validated. If you set it `true`, all validation styles will be applied to the forms component.\n   */\n  validated?: boolean\n}\n\nexport const CForm = forwardRef<HTMLFormElement, CFormProps>(\n  ({ children, className, validated, ...rest }, ref) => {\n    return (\n      <form\n        className={classNames({ 'was-validated': validated }, className) || undefined}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </form>\n    )\n  },\n)\n\nCForm.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  validated: PropTypes.bool,\n}\n\nCForm.displayName = 'CForm'\n","import React, { forwardRef, InputHTMLAttributes, ReactNode, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormLabel } from './CFormLabel'\n\nimport { useForkedRef } from '../../hooks'\nimport type { Colors, Shapes } from '../../types'\n\nexport type ButtonObject = {\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Select the shape of the component.\n   *\n   * @type 'rounded' | 'rounded-top' | 'rounded-end' | 'rounded-bottom' | 'rounded-start' | 'rounded-circle' | 'rounded-pill' | 'rounded-0' | 'rounded-1' | 'rounded-2' | 'rounded-3' | string\n   */\n  shape?: Shapes\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Set the button variant to an outlined button or a ghost button.\n   */\n  variant?: 'outline' | 'ghost'\n}\n\nexport interface CFormCheckProps\n  extends CFormControlValidationProps,\n    InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Create button-like checkboxes and radio buttons.\n   */\n  button?: ButtonObject\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets hit area to the full area of the component.\n   */\n  hitArea?: 'full'\n  /**\n   * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n   */\n  id?: string\n  /**\n   * Input Checkbox indeterminate Property.\n   */\n  indeterminate?: boolean\n  /**\n   * Group checkboxes or radios on the same horizontal row.\n   */\n  inline?: boolean\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * The element represents a caption for a component.\n   */\n  label?: string | ReactNode\n  /**\n   * Put checkboxes or radios on the opposite side.\n   *\n   * @sinve 4.7.0\n   */\n  reverse?: boolean\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'checkbox' | 'radio'\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormCheck = forwardRef<HTMLInputElement, CFormCheckProps>(\n  (\n    {\n      className,\n      button,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingLabel,\n      tooltipFeedback,\n      hitArea,\n      id,\n      indeterminate,\n      inline,\n      invalid,\n      label,\n      reverse,\n      type = 'checkbox',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null)\n    const forkedRef = useForkedRef(ref, inputRef)\n\n    useEffect(() => {\n      if (inputRef.current && indeterminate) {\n        inputRef.current.indeterminate = indeterminate\n      }\n    }, [indeterminate, inputRef.current])\n\n    const FormControl = () => (\n      <input\n        type={type}\n        className={classNames(button ? 'btn-check' : 'form-check-input', {\n          'is-invalid': invalid,\n          'is-valid': valid,\n          'me-2': hitArea,\n        })}\n        id={id}\n        {...rest}\n        ref={forkedRef}\n      />\n    )\n\n    const FormValidation = () => (\n      <CFormControlValidation\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingLabel={floatingLabel}\n        invalid={invalid}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      />\n    )\n\n    const FormLabel = () => (\n      <CFormLabel\n        customClassName={classNames(\n          button\n            ? classNames(\n                'btn',\n                button.variant ? `btn-${button.variant}-${button.color}` : `btn-${button.color}`,\n                {\n                  [`btn-${button.size}`]: button.size,\n                },\n                `${button.shape}`,\n              )\n            : 'form-check-label',\n        )}\n        {...(id && { htmlFor: id })}\n      >\n        {label}\n      </CFormLabel>\n    )\n\n    const FormCheck = () => {\n      if (button) {\n        return (\n          <>\n            <FormControl />\n            {label && <FormLabel />}\n            <FormValidation />\n          </>\n        )\n      }\n\n      if (label) {\n        return hitArea ? (\n          <>\n            <FormControl />\n            <CFormLabel\n              customClassName={classNames('form-check-label stretched-link', className)}\n              {...(id && { htmlFor: id })}\n            >\n              {label}\n            </CFormLabel>\n            <FormValidation />\n          </>\n        ) : (\n          <div\n            className={classNames(\n              'form-check',\n              {\n                'form-check-inline': inline,\n                'form-check-reverse': reverse,\n                'is-invalid': invalid,\n                'is-valid': valid,\n              },\n              className,\n            )}\n          >\n            <FormControl />\n            <FormLabel />\n            <FormValidation />\n          </div>\n        )\n      }\n\n      return <FormControl />\n    }\n\n    return <FormCheck />\n  },\n)\n\nCFormCheck.propTypes = {\n  button: PropTypes.object,\n  className: PropTypes.string,\n  hitArea: PropTypes.oneOf(['full']),\n  id: PropTypes.string,\n  indeterminate: PropTypes.bool,\n  inline: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormCheck.displayName = 'CFormCheck'\n","import React, { FC, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CFormFeedback } from './CFormFeedback'\n\nexport interface CFormControlValidationProps {\n  /**\n   * @ignore\n   */\n  describedby?: string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedback?: ReactNode | string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedbackInvalid?: ReactNode | string\n  /**\n   * Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  feedbackValid?: ReactNode | string\n  /**\n   * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  floatingLabel?: ReactNode | string\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * Display validation feedback in a styled tooltip.\n   *\n   * @since 4.2.0\n   */\n  tooltipFeedback?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormControlValidation: FC<CFormControlValidationProps> = ({\n  describedby,\n  feedback,\n  feedbackInvalid,\n  feedbackValid,\n  invalid,\n  tooltipFeedback,\n  valid,\n}) => {\n  return (\n    <>\n      {feedback && (valid || invalid) && (\n        <CFormFeedback\n          {...(invalid && { id: describedby })}\n          invalid={invalid}\n          tooltip={tooltipFeedback}\n          valid={valid}\n        >\n          {feedback}\n        </CFormFeedback>\n      )}\n      {feedbackInvalid && (\n        <CFormFeedback id={describedby} invalid tooltip={tooltipFeedback}>\n          {feedbackInvalid}\n        </CFormFeedback>\n      )}\n      {feedbackValid && (\n        <CFormFeedback valid tooltip={tooltipFeedback}>\n          {feedbackValid}\n        </CFormFeedback>\n      )}\n    </>\n  )\n}\n\nCFormControlValidation.propTypes = {\n  describedby: PropTypes.string,\n  feedback: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackValid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackInvalid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  invalid: PropTypes.bool,\n  tooltipFeedback: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormControlValidation.displayName = 'CFormControlValidation'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CFormTextProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CFormText: PolymorphicRefForwardingComponent<'div', CFormTextProps> = forwardRef<\n  HTMLDivElement | HTMLSpanElement,\n  CFormTextProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('form-text', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCFormText.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCFormText.displayName = 'CFormText'\n","import React, { FC, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormFloating } from './CFormFloating'\nimport { CFormLabel } from './CFormLabel'\nimport { CFormText } from './CFormText'\n\nexport interface CFormControlWrapperProps extends CFormControlValidationProps {\n  /**\n   * @ignore\n   */\n  children?: ReactNode\n  /**\n   * A string of all className you want applied to the floating label wrapper.\n   *\n   * @since 4.5.0\n   */\n  floatingClassName?: string\n  /**\n   * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  floatingLabel?: ReactNode | string\n  /**\n   * @ignore\n   */\n  id?: string\n  /**\n   * Add a caption for a component.\n   *\n   * @since 4.2.0\n   */\n  label?: ReactNode | string\n  /**\n   * Add helper text to the component.\n   *\n   * @since 4.2.0\n   */\n  text?: ReactNode | string\n}\n\nexport const CFormControlWrapper: FC<CFormControlWrapperProps> = ({\n  children,\n  describedby,\n  feedback,\n  feedbackInvalid,\n  feedbackValid,\n  floatingClassName,\n  floatingLabel,\n  id,\n  invalid,\n  label,\n  text,\n  tooltipFeedback,\n  valid,\n}) => {\n  const FormControlValidation = () => (\n    <CFormControlValidation\n      describedby={describedby}\n      feedback={feedback}\n      feedbackInvalid={feedbackInvalid}\n      feedbackValid={feedbackValid}\n      floatingLabel={floatingLabel}\n      invalid={invalid}\n      tooltipFeedback={tooltipFeedback}\n      valid={valid}\n    />\n  )\n  return floatingLabel ? (\n    <CFormFloating className={floatingClassName}>\n      {children}\n      <CFormLabel htmlFor={id}>{label || floatingLabel}</CFormLabel>\n      {text && <CFormText id={describedby}>{text}</CFormText>}\n      <FormControlValidation />\n    </CFormFloating>\n  ) : (\n    <>\n      {label && <CFormLabel htmlFor={id}>{label}</CFormLabel>}\n      {children}\n      {text && <CFormText id={describedby}>{text}</CFormText>}\n      <FormControlValidation />\n    </>\n  )\n}\n\nCFormControlWrapper.propTypes = {\n  children: PropTypes.node,\n  floatingClassName: PropTypes.string,\n  floatingLabel: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  label: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  text: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormControlWrapper.displayName = 'CFormControlWrapper'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CFormFeedbackProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  invalid?: boolean\n  /**\n   * If your form layout allows it, you can display validation feedback in a styled tooltip.\n   */\n  tooltip?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormFeedback: PolymorphicRefForwardingComponent<'div', CFormFeedbackProps> =\n  forwardRef<HTMLDivElement | HTMLSpanElement, CFormFeedbackProps>(\n    ({ children, as: Component = 'div', className, invalid, tooltip, valid, ...rest }, ref) => {\n      return (\n        <Component\n          className={classNames(\n            {\n              [`invalid-${tooltip ? 'tooltip' : 'feedback'}`]: invalid,\n              [`valid-${tooltip ? 'tooltip' : 'feedback'}`]: valid,\n            },\n            className,\n          )}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </Component>\n      )\n    },\n  )\n\nCFormFeedback.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  invalid: PropTypes.bool,\n  tooltip: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormFeedback.displayName = 'CFormFeedback'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormFloatingProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CFormFloating = forwardRef<HTMLDivElement, CFormFloatingProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('form-floating', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCFormFloating.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCFormFloating.displayName = 'CFormFloating'\n","import React, {\n  ChangeEventHandler,\n  forwardRef,\n  InputHTMLAttributes,\n  useEffect,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\nexport interface CFormInputProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Delay onChange event while typing. If set to true onChange event will be delayed 500ms, you can also provide the number of milliseconds you want to delay the onChange event.\n   */\n  delay?: boolean | number\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLInputElement>\n  /**\n   * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n   */\n  plainText?: boolean\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'color' | 'file' | 'text' | string\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormInput = forwardRef<HTMLInputElement, CFormInputProps>(\n  (\n    {\n      children,\n      className,\n      delay = false,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      id,\n      invalid,\n      label,\n      onChange,\n      plainText,\n      size,\n      text,\n      tooltipFeedback,\n      type = 'text',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const [value, setValue] = useState<React.ChangeEvent<HTMLInputElement>>()\n\n    useEffect(() => {\n      const timeOutId = setTimeout(\n        () => value && onChange && onChange(value),\n        typeof delay === 'number' ? delay : 500,\n      )\n\n      return () => clearTimeout(timeOutId)\n    }, [value])\n\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <input\n          className={classNames(\n            plainText ? 'form-control-plaintext' : 'form-control',\n            {\n              [`form-control-${size}`]: size,\n              'form-control-color': type === 'color',\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          id={id}\n          type={type}\n          onChange={(event) => (delay ? setValue(event) : onChange && onChange(event))}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </input>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormInput.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  delay: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  plainText: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg']),\n  type: PropTypes.oneOfType([PropTypes.oneOf(['color', 'file', 'text']), PropTypes.string]),\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormInput.displayName = 'CFormInput'\n","import React, { forwardRef, LabelHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormLabelProps extends LabelHTMLAttributes<HTMLLabelElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * A string of all className you want to be applied to the component, and override standard className value.\n   */\n  customClassName?: string\n}\n\nexport const CFormLabel = forwardRef<HTMLLabelElement, CFormLabelProps>(\n  ({ children, className, customClassName, ...rest }, ref) => {\n    return (\n      <label className={customClassName ?? classNames('form-label', className)} {...rest} ref={ref}>\n        {children}\n      </label>\n    )\n  },\n)\n\nCFormLabel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  customClassName: PropTypes.string,\n}\n\nCFormLabel.displayName = 'CFormLabel'\n","import React, { ChangeEventHandler, forwardRef, InputHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\ntype Option = {\n  disabled?: boolean\n  label?: string\n  value?: string\n}\n\nexport interface CFormSelectProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLSelectElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Specifies the number of visible options in a drop-down list.\n   */\n  htmlSize?: number\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLSelectElement>\n  /**\n   * Options list of the select component. Available keys: `label`, `value`, `disabled`.\n   * Examples:\n   * - `options={[{ value: 'js', label: 'JavaScript' }, { value: 'html', label: 'HTML', disabled: true }]}`\n   * - `options={['js', 'html']}`\n   */\n  options?: Option[] | string[]\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   */\n  value?: string | string[] | number\n}\n\nexport const CFormSelect = forwardRef<HTMLSelectElement, CFormSelectProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      htmlSize,\n      id,\n      invalid,\n      label,\n      options,\n      size,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <select\n          id={id}\n          className={classNames(\n            'form-select',\n            {\n              [`form-select-${size}`]: size,\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          size={htmlSize}\n          {...rest}\n          ref={ref}\n        >\n          {options\n            ? options.map((option, index) => {\n                return (\n                  <option\n                    {...(typeof option === 'object' &&\n                      option.disabled && { disabled: option.disabled })}\n                    {...(typeof option === 'object' &&\n                      option.value !== undefined && { value: option.value })}\n                    key={index}\n                  >\n                    {typeof option === 'string' ? option : option.label}\n                  </option>\n                )\n              })\n            : children}\n        </select>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormSelect.propTypes = {\n  className: PropTypes.string,\n  htmlSize: PropTypes.number,\n  options: PropTypes.array,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormSelect.displayName = 'CFormSelect'\n","import React, { ChangeEventHandler, forwardRef, TextareaHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\nexport interface CFormTextareaProps\n  extends CFormControlWrapperProps,\n    TextareaHTMLAttributes<HTMLTextAreaElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLTextAreaElement>\n  /**\n   * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n   */\n  plainText?: boolean\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormTextarea = forwardRef<HTMLTextAreaElement, CFormTextareaProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      id,\n      invalid,\n      label,\n      plainText,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <textarea\n          className={classNames(\n            plainText ? 'form-control-plaintext' : 'form-control',\n            {\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          id={id}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </textarea>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormTextarea.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  plainText: PropTypes.bool,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormTextarea.displayName = 'CFormTextarea'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CInputGroupProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n}\n\nexport const CInputGroup = forwardRef<HTMLDivElement, CInputGroupProps>(\n  ({ children, className, size, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'input-group',\n          {\n            [`input-group-${size}`]: size,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCInputGroup.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  size: PropTypes.oneOf(['sm', 'lg']),\n}\n\nCInputGroup.displayName = 'CInputGroup'\n","import React, { ElementType, forwardRef, LabelHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CInputGroupTextProps\n  extends LabelHTMLAttributes<HTMLLabelElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CInputGroupText: PolymorphicRefForwardingComponent<'span', CInputGroupTextProps> =\n  forwardRef<HTMLLabelElement | HTMLSpanElement, CInputGroupTextProps>(\n    ({ children, as: Component = 'span', className, ...rest }, ref) => {\n      return (\n        <Component className={classNames('input-group-text', className)} {...rest} ref={ref}>\n          {children}\n        </Component>\n      )\n    },\n  )\n\nCInputGroupText.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCInputGroupText.displayName = 'CInputGroupText'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\ntype Span = 'auto' | number | string | boolean | null\n\ntype BPObject = {\n  span?: Span\n  offset?: number | string | null\n  order?: 'first' | 'last' | number | string | null\n}\n\ntype Col = Span | BPObject\n\nexport interface CColProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xs?: Col\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  sm?: Col\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  md?: Col\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  lg?: Col\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xl?: Col\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xxl?: Col\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CCol = forwardRef<HTMLDivElement, CColProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n        repsonsiveClassNames.push(`col${infix}-${breakpoint}`)\n      }\n\n      if (typeof breakpoint === 'boolean') {\n        repsonsiveClassNames.push(`col${infix}`)\n      }\n\n      if (breakpoint && typeof breakpoint === 'object') {\n        if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n          repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`)\n        }\n\n        if (typeof breakpoint.span === 'boolean') {\n          repsonsiveClassNames.push(`col${infix}`)\n        }\n\n        if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n          repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`)\n        }\n\n        if (typeof breakpoint.offset === 'number') {\n          repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`)\n        }\n      }\n    })\n\n    return (\n      <div\n        className={classNames(\n          repsonsiveClassNames.length > 0 ? repsonsiveClassNames : 'col',\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nconst span = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.oneOf(['auto']),\n])\n\nconst col = PropTypes.oneOfType([\n  span,\n  PropTypes.shape({\n    span: span,\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    order: PropTypes.oneOfType([\n      PropTypes.oneOf(['first', 'last']),\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  }),\n])\n\nCCol.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: col,\n  sm: col,\n  md: col,\n  lg: col,\n  xl: col,\n  xxl: col,\n}\n\nCCol.displayName = 'CCol'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport type BPObject = {\n  cols?: 'auto' | number | string | null\n  gutter?: number | string | null\n  gutterX?: number | string | null\n  gutterY?: number | string | null\n}\n\nexport interface CRowProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xs?: BPObject\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  sm?: BPObject\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  md?: BPObject\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  lg?: BPObject\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xl?: BPObject\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xxl?: BPObject\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CRow = forwardRef<HTMLDivElement, CRowProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'object') {\n        if (breakpoint.cols) {\n          repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`)\n        }\n\n        if (typeof breakpoint.gutter === 'number') {\n          repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`)\n        }\n\n        if (typeof breakpoint.gutterX === 'number') {\n          repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`)\n        }\n\n        if (typeof breakpoint.gutterY === 'number') {\n          repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`)\n        }\n      }\n    })\n\n    return (\n      <div className={classNames('row', repsonsiveClassNames, className)} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nconst bp = PropTypes.shape({\n  cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n})\n\nCRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: bp,\n  sm: bp,\n  md: bp,\n  lg: bp,\n  xl: bp,\n  xxl: bp,\n}\n\nCRow.displayName = 'CRow'\n"],"names":["CustomStyles","validated","setValidated","useState","_jsxs","CForm","className","noValidate","onSubmit","event","currentTarget","checkValidity","preventDefault","stopPropagation","children","CCol","md","_jsx","CFormLabel","htmlFor","CFormInput","type","id","defaultValue","required","CFormFeedback","valid","CInputGroup","CInputGroupText","invalid","CFormSelect","disabled","xs","CFormCheck","label","CButton","color","BrowserDefaults","Tooltips","tooltip","Validation","CRow","CCard","CCardHeader","CCardBody","DocsExample","href","CFormTextarea","placeholder","name","value","forwardRef","_a","ref","textBgColor","textColor","rest","__rest","React","__assign","classNames","_b","concat","propTypes","PropTypes","colorPropType","displayName","as","Component","undefined","button","feedback","feedbackInvalid","feedbackValid","floatingLabel","tooltipFeedback","hitArea","indeterminate","inline","reverse","inputRef","useRef","forkedRef","useForkedRef","useEffect","current","FormControl","FormValidation","CFormControlValidation","describedby","FormLabel","customClassName","variant","size","shape","CFormText","CFormControlWrapper","floatingClassName","text","FormControlValidation","CFormFloating","_c","delay","onChange","plainText","_d","_e","setValue","timeOutId","setTimeout","clearTimeout","htmlSize","options","map","option","index","key","BREAKPOINTS","repsonsiveClassNames","forEach","bp","breakpoint","infix","push","span","order","offset","length","col","sm","lg","xl","xxl","cols","gutter","gutterX","gutterY"],"sourceRoot":""}