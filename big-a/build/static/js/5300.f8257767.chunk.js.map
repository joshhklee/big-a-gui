{"version":3,"file":"static/js/5300.f8257767.chunk.js","mappings":"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","sources":["../node_modules/@coreui/react/src/components/carousel/CCarousel.tsx","../node_modules/@coreui/react/src/components/carousel/CCarouselItem.tsx","../node_modules/@coreui/react/src/components/carousel/CCarouselCaption.tsx","views/base/carousels/Carousels.js","../node_modules/@coreui/react/src/components/card/CCard.tsx","../node_modules/@coreui/react/src/components/card/CCardBody.tsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx","../node_modules/@coreui/react/src/components/grid/CCol.tsx","../node_modules/@coreui/react/src/components/grid/CRow.tsx"],"sourcesContent":["import React, {\n  Children,\n  createContext,\n  forwardRef,\n  HTMLAttributes,\n  TouchEvent,\n  useState,\n  useEffect,\n  useRef,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { isInViewport } from '../../utils'\nimport { useForkedRef } from '../../hooks'\n\nexport interface CCarouselProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * index of the active item.\n   */\n  activeIndex?: number\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Adding in the previous and next controls.\n   */\n  controls?: boolean\n  /**\n   * Add darker controls, indicators, and captions.\n   */\n  dark?: boolean\n  /**\n   * The amount of time to delay between automatically cycling an item. If false, carousel will not automatically cycle.\n   */\n  interval?: boolean | number\n  /**\n   * Adding indicators at the bottom of the carousel for each item.\n   */\n  indicators?: boolean\n  /**\n   * Callback fired when a slide transition end.\n   */\n  onSlid?: (active: number, direction: string) => void\n  /**\n   * Callback fired when a slide transition starts.\n   */\n  onSlide?: (active: number, direction: string) => void\n  /**\n   * If set to 'hover', pauses the cycling of the carousel on mouseenter and resumes the cycling of the carousel on mouseleave. If set to false, hovering over the carousel won't pause it.\n   */\n  pause?: boolean | 'hover'\n  /**\n   * Set whether the carousel should support left/right swipe interactions on touchscreen devices.\n   *\n   * @since 4.5.0\n   */\n  touch?: boolean\n  /**\n   * Set type of the transition.\n   */\n  transition?: 'slide' | 'crossfade'\n  /**\n   * Set whether the carousel should cycle continuously or have hard stops.\n   */\n  wrap?: boolean\n}\n\ninterface DataType {\n  timeout?: null | ReturnType<typeof setTimeout>\n}\n\nexport interface ContextProps {\n  setAnimating: (a: boolean) => void\n  setCustomInterval: (a: boolean | number) => void\n}\n\nexport const CCarouselContext = createContext({} as ContextProps)\n\nexport const CCarousel = forwardRef<HTMLDivElement, CCarouselProps>(\n  (\n    {\n      children,\n      activeIndex = 0,\n      className,\n      controls,\n      dark,\n      indicators,\n      interval = 5000,\n      onSlid,\n      onSlide,\n      pause = 'hover',\n      touch = true,\n      transition,\n      wrap = true,\n      ...rest\n    },\n    ref,\n  ) => {\n    const carouselRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, carouselRef)\n    const data = useRef<DataType>({}).current\n\n    const [active, setActive] = useState<number>(activeIndex)\n    const [animating, setAnimating] = useState<boolean>(false)\n    const [customInterval, setCustomInterval] = useState<boolean | number>()\n    const [direction, setDirection] = useState<string>('next')\n    const [itemsNumber, setItemsNumber] = useState<number>(0)\n    const [touchPosition, setTouchPosition] = useState<number | null>(null)\n    const [visible, setVisible] = useState<boolean>()\n\n    useEffect(() => {\n      setItemsNumber(Children.toArray(children).length)\n    })\n\n    useEffect(() => {\n      visible && cycle()\n    }, [visible])\n\n    useEffect(() => {\n      !animating && cycle()\n      !animating && onSlid && onSlid(active, direction)\n      animating && onSlide && onSlide(active, direction)\n    }, [animating])\n\n    useEffect(() => {\n      window.addEventListener('scroll', handleScroll)\n\n      return () => {\n        window.removeEventListener('scroll', handleScroll)\n      }\n    })\n\n    const cycle = () => {\n      _pause()\n      if (!wrap && active === itemsNumber - 1) {\n        return\n      }\n\n      if (typeof interval === 'number') {\n        data.timeout = setTimeout(\n          () => nextItemWhenVisible(),\n          typeof customInterval === 'number' ? customInterval : interval,\n        )\n      }\n    }\n    const _pause = () => pause && data.timeout && clearTimeout(data.timeout)\n\n    const nextItemWhenVisible = () => {\n      // Don't call next when the page isn't visible\n      // or the carousel or its parent isn't visible\n      if (!document.hidden && carouselRef.current && isInViewport(carouselRef.current)) {\n        if (animating) {\n          return\n        }\n        handleControlClick('next')\n      }\n    }\n\n    const handleControlClick = (direction: string) => {\n      if (animating) {\n        return\n      }\n      setDirection(direction)\n      if (direction === 'next') {\n        active === itemsNumber - 1 ? setActive(0) : setActive(active + 1)\n      } else {\n        active === 0 ? setActive(itemsNumber - 1) : setActive(active - 1)\n      }\n    }\n\n    const handleIndicatorClick = (index: number) => {\n      if (active === index) {\n        return\n      }\n\n      if (active < index) {\n        setDirection('next')\n        setActive(index)\n        return\n      }\n\n      if (active > index) {\n        setDirection('prev')\n        setActive(index)\n      }\n    }\n\n    const handleScroll = () => {\n      if (!document.hidden && carouselRef.current && isInViewport(carouselRef.current)) {\n        setVisible(true)\n      } else {\n        setVisible(false)\n      }\n    }\n\n    const handleTouchMove = (e: TouchEvent) => {\n      const touchDown = touchPosition\n\n      if (touchDown === null) {\n        return\n      }\n\n      const currentTouch = e.touches[0].clientX\n      const diff = touchDown - currentTouch\n\n      if (diff > 5) {\n        handleControlClick('next')\n      }\n\n      if (diff < -5) {\n        handleControlClick('prev')\n      }\n\n      setTouchPosition(null)\n    }\n\n    const handleTouchStart = (e: TouchEvent) => {\n      const touchDown = e.touches[0].clientX\n      setTouchPosition(touchDown)\n    }\n\n    return (\n      <div\n        className={classNames(\n          'carousel slide',\n          {\n            'carousel-fade': transition === 'crossfade',\n          },\n          className,\n        )}\n        {...(dark && { 'data-coreui-theme': 'dark' })}\n        onMouseEnter={_pause}\n        onMouseLeave={cycle}\n        {...(touch && { onTouchStart: handleTouchStart, onTouchMove: handleTouchMove })}\n        {...rest}\n        ref={forkedRef}\n      >\n        <CCarouselContext.Provider\n          value={{\n            setAnimating,\n            setCustomInterval,\n          }}\n        >\n          {indicators && (\n            <div className=\"carousel-indicators\">\n              {Array.from({ length: itemsNumber }, (_, i) => i).map((index) => {\n                return (\n                  <button\n                    key={`indicator${index}`}\n                    onClick={() => {\n                      !animating && handleIndicatorClick(index)\n                    }}\n                    className={classNames({\n                      active: active === index,\n                    })}\n                    data-coreui-target=\"\"\n                    {...(active === index && { 'aria-current': true })}\n                    aria-label={`Slide ${index + 1}`}\n                  />\n                )\n              })}\n            </div>\n          )}\n          <div className=\"carousel-inner\">\n            {Children.map(children, (child, index) => {\n              if (React.isValidElement(child)) {\n                return React.cloneElement(child as React.ReactElement<any>, {\n                  active: active === index ? true : false,\n                  direction: direction,\n                  key: index,\n                })\n              }\n              return\n            })}\n          </div>\n          {controls && (\n            <>\n              <button className=\"carousel-control-prev\" onClick={() => handleControlClick('prev')}>\n                <span className={`carousel-control-prev-icon`} aria-label=\"prev\" />\n              </button>\n              <button className=\"carousel-control-next\" onClick={() => handleControlClick('next')}>\n                <span className={`carousel-control-next-icon`} aria-label=\"next\" />\n              </button>\n            </>\n          )}\n        </CCarouselContext.Provider>\n      </div>\n    )\n  },\n)\n\nCCarousel.propTypes = {\n  activeIndex: PropTypes.number,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  controls: PropTypes.bool,\n  dark: PropTypes.bool,\n  indicators: PropTypes.bool,\n  interval: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  onSlid: PropTypes.func,\n  onSlide: PropTypes.func,\n  pause: PropTypes.oneOf([false, 'hover']),\n  touch: PropTypes.bool,\n  transition: PropTypes.oneOf(['slide', 'crossfade']),\n  wrap: PropTypes.bool,\n}\n\nCCarousel.displayName = 'CCarousel'\n","import React, { forwardRef, HTMLAttributes, useContext, useEffect, useState, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { useForkedRef } from '../../hooks'\nimport { CCarouselContext } from './CCarousel'\nexport interface CCarouselItemProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * @ignore\n   */\n  active?: boolean\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * @ignore\n   */\n  direction?: string\n  /**\n   * The amount of time to delay between automatically cycling an item.\n   */\n  interval?: boolean | number\n}\n\nexport const CCarouselItem = forwardRef<HTMLDivElement, CCarouselItemProps>(\n  ({ children, className, active, direction, interval = false, ...rest }, ref) => {\n    const { setAnimating, setCustomInterval } = useContext(CCarouselContext)\n    const carouselItemRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, carouselItemRef)\n\n    const prevActive = useRef<boolean>()\n    const [directionClassName, setDirectionClassName] = useState<string>()\n    const [orderClassName, setOrderClassName] = useState<string>()\n    const [activeClassName, setActiveClassName] = useState(active && 'active')\n    const [count, setCount] = useState(0)\n\n    useEffect(() => {\n      if (active) {\n        setCustomInterval(interval)\n        if (count !== 0) setOrderClassName(`carousel-item-${direction}`)\n      }\n\n      if (prevActive.current && !active) {\n        setActiveClassName('active')\n      }\n\n      if (active || prevActive.current) {\n        setTimeout(() => {\n          if (count !== 0) {\n            // @ts-expect-error reflow is necessary to proper transition\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const reflow = carouselItemRef.current?.offsetHeight\n            setDirectionClassName(`carousel-item-${direction === 'next' ? 'start' : 'end'}`)\n          }\n        }, 0)\n      }\n\n      prevActive.current = active\n\n      if (count === 0) setCount(count + 1)\n    }, [active])\n\n    useEffect(() => {\n      carouselItemRef.current?.addEventListener('transitionstart', () => {\n        active && setAnimating(true)\n      })\n      carouselItemRef.current?.addEventListener('transitionend', () => {\n        active && setAnimating(false)\n        setDirectionClassName('')\n        setOrderClassName('')\n        if (active) {\n          setActiveClassName('active')\n        }\n        if (!active) {\n          setActiveClassName('')\n        }\n      })\n      return () => {\n        carouselItemRef.current?.removeEventListener('transitionstart', () => {\n          active && setAnimating(true)\n        })\n        carouselItemRef.current?.removeEventListener('transitionend', () => {\n          active && setAnimating(false)\n          setDirectionClassName('')\n          setOrderClassName('')\n          if (active) {\n            setActiveClassName('active')\n          }\n          if (!active) {\n            setActiveClassName('')\n          }\n        })\n      }\n    })\n\n    return (\n      <div\n        className={classNames(\n          'carousel-item',\n          activeClassName,\n          directionClassName,\n          orderClassName,\n          className,\n        )}\n        ref={forkedRef}\n        {...rest}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCarouselItem.propTypes = {\n  active: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  direction: PropTypes.string,\n  interval: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n}\n\nCCarouselItem.displayName = 'CCarouselItem'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCarouselCaptionProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCarouselCaption = forwardRef<HTMLDivElement, CCarouselCaptionProps>(\n  ({ className, ...rest }, ref) => {\n    return <div className={classNames('carousel-caption', className)} {...rest} ref={ref} />\n  },\n)\n\nCCarouselCaption.propTypes = {\n  className: PropTypes.string,\n}\n\nCCarouselCaption.displayName = 'CCarouselCaption'\n","import React from 'react'\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCarousel,\n  CCarouselCaption,\n  CCarouselItem,\n  CCol,\n  CRow,\n} from '@coreui/react'\nimport { DocsExample } from '../../../components'\n\nimport AngularImg from '../../../assets/images/angular.jpg'\nimport ReactImg from '../../../assets/images/react.jpg'\nimport VueImg from '../../../assets/images/vue.jpg'\n\nconst slidesLight = [\n  'data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22800%22%20height%3D%22400%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20800%20400%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_1607923e7e2%20text%20%7B%20fill%3A%23AAA%3Bfont-weight%3Anormal%3Bfont-family%3AHelvetica%2C%20monospace%3Bfont-size%3A40pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_1607923e7e2%22%3E%3Crect%20width%3D%22800%22%20height%3D%22400%22%20fill%3D%22%23F5F5F5%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%22285.9296875%22%20y%3D%22217.75625%22%3EFirst%20slide%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E',\n  'data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22800%22%20height%3D%22400%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20800%20400%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_15ba800aa20%20text%20%7B%20fill%3A%23BBB%3Bfont-weight%3Anormal%3Bfont-family%3AHelvetica%2C%20monospace%3Bfont-size%3A40pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_15ba800aa20%22%3E%3Crect%20width%3D%22800%22%20height%3D%22400%22%20fill%3D%22%23EEE%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%22247.3203125%22%20y%3D%22218.3%22%3ESecond%20slide%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E',\n  'data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22800%22%20height%3D%22400%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20800%20400%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_15ba800aa21%20text%20%7B%20fill%3A%23999%3Bfont-weight%3Anormal%3Bfont-family%3AHelvetica%2C%20monospace%3Bfont-size%3A40pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_15ba800aa21%22%3E%3Crect%20width%3D%22800%22%20height%3D%22400%22%20fill%3D%22%23E5E5E5%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%22277%22%20y%3D%22218.3%22%3EThird%20slide%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E',\n]\n\nconst Carousels = () => {\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Carousel</strong> <small>Slide only</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">Here’s a carousel with slides</p>\n            <DocsExample href=\"components/carousel\">\n              <CCarousel>\n                <CCarouselItem>\n                  <img className=\"d-block w-100\" src={ReactImg} alt=\"slide 1\" />\n                </CCarouselItem>\n                <CCarouselItem>\n                  <img className=\"d-block w-100\" src={AngularImg} alt=\"slide 2\" />\n                </CCarouselItem>\n                <CCarouselItem>\n                  <img className=\"d-block w-100\" src={VueImg} alt=\"slide 3\" />\n                </CCarouselItem>\n              </CCarousel>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Carousel</strong> <small>With controls</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Adding in the previous and next controls by <code>controls</code> property.\n            </p>\n            <DocsExample href=\"components/carousel/#with-controls\">\n              <CCarousel controls>\n                <CCarouselItem>\n                  <img className=\"d-block w-100\" src={ReactImg} alt=\"slide 1\" />\n                </CCarouselItem>\n                <CCarouselItem>\n                  <img className=\"d-block w-100\" src={AngularImg} alt=\"slide 2\" />\n                </CCarouselItem>\n                <CCarouselItem>\n                  <img className=\"d-block w-100\" src={VueImg} alt=\"slide 3\" />\n                </CCarouselItem>\n              </CCarousel>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Carousel</strong> <small>With indicators</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              You can attach the indicators to the carousel, lengthwise the controls, too.\n            </p>\n            <DocsExample href=\"components/carousel/#with-indicators\">\n              <CCarousel controls indicators>\n                <CCarouselItem>\n                  <img className=\"d-block w-100\" src={ReactImg} alt=\"slide 1\" />\n                </CCarouselItem>\n                <CCarouselItem>\n                  <img className=\"d-block w-100\" src={AngularImg} alt=\"slide 2\" />\n                </CCarouselItem>\n                <CCarouselItem>\n                  <img className=\"d-block w-100\" src={VueImg} alt=\"slide 3\" />\n                </CCarouselItem>\n              </CCarousel>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Carousel</strong> <small>With captions</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              You can add captions to slides with the <code>&lt;CCarouselCaption&gt;</code> element\n              within any <code>&lt;CCarouselItem&gt;</code>. They can be immediately hidden on\n              smaller viewports, as shown below, with optional{' '}\n              <a href=\"https://coreui.io//utilities/display\">display utilities</a>. We hide them\n              with <code>.d-none</code> and draw them back on medium-sized devices with{' '}\n              <code>.d-md-block</code>.\n            </p>\n            <DocsExample href=\"components/carousel/#with-captions\">\n              <CCarousel controls indicators>\n                <CCarouselItem>\n                  <img className=\"d-block w-100\" src={ReactImg} alt=\"slide 1\" />\n                  <CCarouselCaption className=\"d-none d-md-block\">\n                    <h5>First slide label</h5>\n                    <p>Some representative placeholder content for the first slide.</p>\n                  </CCarouselCaption>\n                </CCarouselItem>\n                <CCarouselItem>\n                  <img className=\"d-block w-100\" src={AngularImg} alt=\"slide 2\" />\n                  <CCarouselCaption className=\"d-none d-md-block\">\n                    <h5>Second slide label</h5>\n                    <p>Some representative placeholder content for the first slide.</p>\n                  </CCarouselCaption>\n                </CCarouselItem>\n                <CCarouselItem>\n                  <img className=\"d-block w-100\" src={VueImg} alt=\"slide 3\" />\n                  <CCarouselCaption className=\"d-none d-md-block\">\n                    <h5>Third slide label</h5>\n                    <p>Some representative placeholder content for the first slide.</p>\n                  </CCarouselCaption>\n                </CCarouselItem>\n              </CCarousel>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Carousel</strong> <small>Crossfade</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Add <code>transition=&#34;crossfade&#34;</code> to your carousel to animate slides\n              with a fade transition instead of a slide.\n            </p>\n            <DocsExample href=\"components/carousel/#crossfade\">\n              <CCarousel controls transition=\"crossfade\">\n                <CCarouselItem>\n                  <img className=\"d-block w-100\" src={ReactImg} alt=\"slide 1\" />\n                </CCarouselItem>\n                <CCarouselItem>\n                  <img className=\"d-block w-100\" src={AngularImg} alt=\"slide 2\" />\n                </CCarouselItem>\n                <CCarouselItem>\n                  <img className=\"d-block w-100\" src={VueImg} alt=\"slide 3\" />\n                </CCarouselItem>\n              </CCarousel>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Carousel</strong> <small>Dark variant</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-body-secondary small\">\n              Add <code>dark</code> property to the <code>CCarousel</code> for darker controls,\n              indicators, and captions. Controls have been inverted from their default white fill\n              with the <code>filter</code> CSS property. Captions and controls have additional Sass\n              variables that customize the <code>color</code> and <code>background-color</code>.\n            </p>\n            <DocsExample href=\"components/carousel/#dark-variant\">\n              <CCarousel controls indicators dark>\n                <CCarouselItem>\n                  <img className=\"d-block w-100\" src={slidesLight[0]} alt=\"slide 1\" />\n                  <CCarouselCaption className=\"d-none d-md-block\">\n                    <h5>First slide label</h5>\n                    <p>Some representative placeholder content for the first slide.</p>\n                  </CCarouselCaption>\n                </CCarouselItem>\n                <CCarouselItem>\n                  <img className=\"d-block w-100\" src={slidesLight[1]} alt=\"slide 2\" />\n                  <CCarouselCaption className=\"d-none d-md-block\">\n                    <h5>Second slide label</h5>\n                    <p>Some representative placeholder content for the first slide.</p>\n                  </CCarouselCaption>\n                </CCarouselItem>\n                <CCarouselItem>\n                  <img className=\"d-block w-100\" src={slidesLight[2]} alt=\"slide 3\" />\n                  <CCarouselCaption className=\"d-none d-md-block\">\n                    <h5>Third slide label</h5>\n                    <p>Some representative placeholder content for the first slide.</p>\n                  </CCarouselCaption>\n                </CCarouselItem>\n              </CCarousel>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Carousels\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n  /**\n   * Sets the component's color scheme to one of CoreUI's themed colors, ensuring the text color contrast adheres to the WCAG 4.5:1 contrast ratio standard for accessibility.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   * @since 5.0.0-rc.3\n   */\n  textBgColor?: Colors\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textBgColor, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n            [`text-bg-${textBgColor}`]: textBgColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textBgColor: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\ntype Span = 'auto' | number | string | boolean | null\n\ntype BPObject = {\n  span?: Span\n  offset?: number | string | null\n  order?: 'first' | 'last' | number | string | null\n}\n\ntype Col = Span | BPObject\n\nexport interface CColProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xs?: Col\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  sm?: Col\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  md?: Col\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  lg?: Col\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xl?: Col\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xxl?: Col\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CCol = forwardRef<HTMLDivElement, CColProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n        repsonsiveClassNames.push(`col${infix}-${breakpoint}`)\n      }\n\n      if (typeof breakpoint === 'boolean') {\n        repsonsiveClassNames.push(`col${infix}`)\n      }\n\n      if (breakpoint && typeof breakpoint === 'object') {\n        if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n          repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`)\n        }\n\n        if (typeof breakpoint.span === 'boolean') {\n          repsonsiveClassNames.push(`col${infix}`)\n        }\n\n        if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n          repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`)\n        }\n\n        if (typeof breakpoint.offset === 'number') {\n          repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`)\n        }\n      }\n    })\n\n    return (\n      <div\n        className={classNames(\n          repsonsiveClassNames.length > 0 ? repsonsiveClassNames : 'col',\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nconst span = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.oneOf(['auto']),\n])\n\nconst col = PropTypes.oneOfType([\n  span,\n  PropTypes.shape({\n    span: span,\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    order: PropTypes.oneOfType([\n      PropTypes.oneOf(['first', 'last']),\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  }),\n])\n\nCCol.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: col,\n  sm: col,\n  md: col,\n  lg: col,\n  xl: col,\n  xxl: col,\n}\n\nCCol.displayName = 'CCol'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport type BPObject = {\n  cols?: 'auto' | number | string | null\n  gutter?: number | string | null\n  gutterX?: number | string | null\n  gutterY?: number | string | null\n}\n\nexport interface CRowProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xs?: BPObject\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  sm?: BPObject\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  md?: BPObject\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  lg?: BPObject\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xl?: BPObject\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xxl?: BPObject\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CRow = forwardRef<HTMLDivElement, CRowProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'object') {\n        if (breakpoint.cols) {\n          repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`)\n        }\n\n        if (typeof breakpoint.gutter === 'number') {\n          repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`)\n        }\n\n        if (typeof breakpoint.gutterX === 'number') {\n          repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`)\n        }\n\n        if (typeof breakpoint.gutterY === 'number') {\n          repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`)\n        }\n      }\n    })\n\n    return (\n      <div className={classNames('row', repsonsiveClassNames, className)} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nconst bp = PropTypes.shape({\n  cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n})\n\nCRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: bp,\n  sm: bp,\n  md: bp,\n  lg: bp,\n  xl: bp,\n  xxl: bp,\n}\n\nCRow.displayName = 'CRow'\n"],"names":["CCarouselContext","createContext","CCarousel","forwardRef","_a","ref","children","_b","activeIndex","className","controls","dark","indicators","_c","interval","onSlid","onSlide","_d","pause","_e","touch","transition","_f","wrap","rest","__rest","carouselRef","useRef","forkedRef","useForkedRef","data","current","_g","useState","active","setActive","_h","animating","setAnimating","_j","customInterval","setCustomInterval","_k","direction","setDirection","_l","itemsNumber","setItemsNumber","_m","touchPosition","setTouchPosition","_o","visible","setVisible","useEffect","Children","toArray","length","cycle","window","addEventListener","handleScroll","removeEventListener","_pause","timeout","setTimeout","nextItemWhenVisible","clearTimeout","document","hidden","isInViewport","handleControlClick","React","__assign","classNames","onMouseEnter","onMouseLeave","onTouchStart","e","touchDown","touches","clientX","onTouchMove","diff","Provider","value","Array","from","_","i","map","index","key","concat","onClick","handleIndicatorClick","child","propTypes","PropTypes","displayName","CCarouselItem","useContext","carouselItemRef","prevActive","directionClassName","setDirectionClassName","orderClassName","setOrderClassName","activeClassName","setActiveClassName","count","setCount","offsetHeight","CCarouselCaption","slidesLight","Carousels","_jsxs","CRow","_jsx","CCol","xs","CCard","CCardHeader","CCardBody","DocsExample","href","src","ReactImg","alt","AngularImg","VueImg","color","textBgColor","textColor","colorPropType","as","Component","BREAKPOINTS","repsonsiveClassNames","forEach","bp","breakpoint","infix","push","span","order","offset","col","sm","md","lg","xl","xxl","cols","gutter","gutterX","gutterY"],"sourceRoot":""}